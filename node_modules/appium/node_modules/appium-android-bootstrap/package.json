{
  "name": "appium-android-bootstrap",
  "description": "Node interface to Appium Android Bootstrap, the java project which appium uses to interact with UiAutomator",
  "keywords": [
    "appium",
    "android",
    "bootstrap"
  ],
  "version": "2.10.0",
  "author": {
    "name": "appium"
  },
  "license": "Apache-2.0",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/appium/appium-android-bootstrap.git"
  },
  "bugs": {
    "url": "https://github.com/appium/appium-android-bootstrap/issues"
  },
  "engines": [
    "node"
  ],
  "main": "./build/index.js",
  "bin": {},
  "directories": {
    "lib": "lib"
  },
  "dependencies": {
    "appium-base-driver": "^2.0.1",
    "appium-support": "^2.5.0",
    "appium-uiautomator": "^1.1.0",
    "babel-runtime": "=5.8.24",
    "bluebird": "^2.10.2",
    "lodash": "^3.10.0",
    "net": "^1.0.2",
    "source-map-support": "^0.3.2",
    "teen_process": "^1.3.1"
  },
  "scripts": {
    "prepublish": "gulp prepublish",
    "test": "gulp once",
    "watch": "gulp"
  },
  "devDependencies": {
    "appium-adb": "^2.3.0",
    "appium-gulp-plugins": "^1.3.12",
    "appium-test-support": "^0.0.5",
    "chai": "^3.3.0",
    "chai-as-promised": "^5.1.0",
    "gulp": "^3.9.0"
  },
  "readme": "## appium-android-bootstrap\n\n[![NPM version](http://img.shields.io/npm/v/appium-android-bootstrap.svg)](https://npmjs.org/package/appium-android-bootstrap)\n[![Downloads](http://img.shields.io/npm/dm/appium-android-bootstrap.svg)](https://npmjs.org/package/appium-android-bootstrap)\n[![Dependency Status](https://david-dm.org/appium/appium-android-bootstrap/master.svg)](https://david-dm.org/appium/appium-android-bootstrap/master)\n[![devDependency Status](https://david-dm.org/appium/appium-android-bootstrap/master/dev-status.svg)](https://david-dm.org/appium/appium-android-bootstrap/master#info=devDependencies)\n\n[![Build Status](https://api.travis-ci.org/appium/appium-android-bootstrap.png?branch=master)](https://travis-ci.org/appium/appium-android-bootstrap)\n[![Coverage Status](https://coveralls.io/repos/appium/appium-android-bootstrap/badge.svg?branch=master)](https://coveralls.io/r/appium/appium-android-bootstrap?branch=master)\n\nJavaScript interface, and Java code, for interacting with Android UI Automator. The system allows _ad hoc_ commands to be sent to the device, which are executed using Android's [UIAutomator](http://developer.android.com/tools/testing-support-library/index.html#UIAutomator) testing framework.\n\n\n### Technical details\n\nThe system works by a `com.android.uiautomator.testrunner.UiAutomatorTestCase` placed on the Android device, which opens a [SocketServer](http://docs.oracle.com/javase/7/docs/api/java/net/ServerSocket.html) on port `4724`. This server receives commands, converts them to appropriate Android UI Automator commands, and runs them in the context of the device.\n\nThe commands are sent through the JavaScript interface.\n\n\n### Usage\n\nThe module provides an `AndroidBootstrap` class, which is instantiated with an instance of [appium-adb](https://github.com/appium/appium-adb), a system port (defaults to `4724`) and an optional web socket. The object then has four `async` methods:\n\n`async start (appPackage, disableAndroidWatchers)`\n\nUses Appium's [UI Automator](https://github.com/appium/appium-uiautomator) interface to install the test case, and sets up socket communication.\n\n- `appPackage` - The package name for the application under test (e.g., 'com.example.android.apis').\n- `disableAndroidWatchers` - Whether or not to watch Android events. Defaults to `false`.\n\n```js\nimport AndroidBootstrap from 'appium-android-bootstrap';\n\nlet androidBootstrap = new AndroidBootstrap();\nawait androidBootstrap.start('com.example.android.apis', false);\n```\n\n\n`async shutdown ()`\n\nShuts down all services. Stops UI Automator process on device, and kills communication.\n\n```js\nawait androidBootstrap.shutdown();\n```\n\n\n`async sendCommand (type, extra, cmdTimeout)`\n\nSend a command to the device.\n\n- `type` - The type of command being sent. The two valid types are `action` and `shutdown`. These are exported as the enumeration `COMMAND_TYPES`\n- `extra` - A hash of extra parameters to send to the device.\n- `cmdTimeout` - The amount of time, in `ms`, to wait for the device to respond. Defaults to `10000`.\n\n```js\nlet dataDir = await androidBootstrap.sendCommand(COMMAND_TYPES.ACTION, {action: 'getDataDir'});\n// dataDir === '/data'\n```\n\n\n`async sendAction (action, params)`\n\nSend an `action` command to the device. Equavalent to `sendCommand ('action', {action: action, params: params})`.\n\n- `action` - The action to be sent.\n- `params` - Parameters for the action.\n\n```js\nlet dataDir = await androidBootstrap.sendAction('getDataDir');\n// dataDir === '/data'\n```\n\n\n`COMMAND_TYPES`\n\nAn enumeration of the available types of commands, to be used for `sendCommand`. The members are `ACTION`, and `SHUTDOWN`.\n\n\n### Development\n\n#### Watch\n\n```js\ngulp watch\n```\n\n#### Test\n\n```js\ngulp once\n```\n\n```js\ngulp e2e-test\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/appium/appium-android-bootstrap#readme",
  "_id": "appium-android-bootstrap@2.10.0",
  "_shasum": "f3efdff0c74ba46a56d80554f38d58ad8ca10819",
  "_resolved": "https://registry.npmjs.org/appium-android-bootstrap/-/appium-android-bootstrap-2.10.0.tgz",
  "_from": "https://registry.npmjs.org/appium-android-bootstrap/-/appium-android-bootstrap-2.10.0.tgz"
}
