'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _2 = require('../..');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var FakeDriver = (function (_MobileJsonWireProtocol) {
  _inherits(FakeDriver, _MobileJsonWireProtocol);

  function FakeDriver() {
    _classCallCheck(this, FakeDriver);

    _get(Object.getPrototypeOf(FakeDriver.prototype), 'constructor', this).call(this);
    this.protocol = _2.BaseDriver.DRIVER_PROTOCOL.MJSONWP;
    this.sessionId = null;
    this.jwpProxyActive = false;
  }

  _createClass(FakeDriver, [{
    key: 'sessionExists',
    value: function sessionExists(sessionId) {
      if (!sessionId) {
        return false;
      }
      return sessionId === this.sessionId;
    }
  }, {
    key: 'driverForSession',
    value: function driverForSession() /*sessionId*/{
      return this;
    }
  }, {
    key: 'createSession',
    value: function createSession(desiredCapabilities, requiredCapabilities, capabilities) {
      return _regeneratorRuntime.async(function createSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.sessionId = "1234";

            if (!capabilities) {
              context$2$0.next = 5;
              break;
            }

            return context$2$0.abrupt('return', [this.sessionId, capabilities]);

          case 5:
            this.desiredCapabilities = desiredCapabilities;
            this.requiredCapabilities = requiredCapabilities || {};
            return context$2$0.abrupt('return', [this.sessionId, _lodash2['default'].extend({}, desiredCapabilities, requiredCapabilities)]);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'executeCommand',
    value: function executeCommand(cmd) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return _regeneratorRuntime.async(function executeCommand$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this[cmd]) {
              context$2$0.next = 2;
              break;
            }

            throw new _2.errors.NotYetImplementedError();

          case 2:
            if (cmd === 'createSession') {
              this.protocol = _2.BaseDriver.determineProtocol.apply(null, args);
            }
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this[cmd].apply(this, args));

          case 5:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.jwpProxyActive = false;
            this.sessionId = null;

          case 2:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getStatus',
    value: function getStatus() {
      return _regeneratorRuntime.async(function getStatus$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', "I'm fine");

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setUrl',
    value: function setUrl(url) {
      return _regeneratorRuntime.async(function setUrl$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', 'Navigated to: ' + url);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getUrl',
    value: function getUrl() {
      return _regeneratorRuntime.async(function getUrl$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', "http://foobar.com");

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'back',
    value: function back(sessionId) {
      return _regeneratorRuntime.async(function back$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', sessionId);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'forward',
    value: function forward() {
      return _regeneratorRuntime.async(function forward$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'refresh',
    value: function refresh() {
      return _regeneratorRuntime.async(function refresh$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            throw new Error('Too Fresh!');

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getSession',
    value: function getSession() {
      return _regeneratorRuntime.async(function getSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            throw new _2.errors.NoSuchDriverError();

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'click',
    value: function click(elementId, sessionId) {
      return _regeneratorRuntime.async(function click$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', [elementId, sessionId]);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'implicitWait',
    value: function implicitWait(ms) {
      return _regeneratorRuntime.async(function implicitWait$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', ms);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'clickCurrent',
    value: function clickCurrent(button) {
      return _regeneratorRuntime.async(function clickCurrent$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', button);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setNetworkConnection',
    value: function setNetworkConnection(type) {
      return _regeneratorRuntime.async(function setNetworkConnection$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', type);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'moveTo',
    value: function moveTo(element, xOffset, yOffset) {
      return _regeneratorRuntime.async(function moveTo$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', [element, xOffset, yOffset]);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getText',
    value: function getText() {
      return _regeneratorRuntime.async(function getText$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', "");

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getAttribute',
    value: function getAttribute(attr, elementId, sessionId) {
      return _regeneratorRuntime.async(function getAttribute$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', [attr, elementId, sessionId]);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setValue',
    value: function setValue(value, elementId) {
      return _regeneratorRuntime.async(function setValue$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', [value, elementId]);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'performTouch',
    value: function performTouch() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _regeneratorRuntime.async(function performTouch$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', args);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setFrame',
    value: function setFrame(frameId) {
      return _regeneratorRuntime.async(function setFrame$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', frameId);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'removeApp',
    value: function removeApp(app) {
      return _regeneratorRuntime.async(function removeApp$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', app);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'receiveAsyncResponse',
    value: function receiveAsyncResponse() {
      return _regeneratorRuntime.async(function receiveAsyncResponse$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', { status: 13, value: 'Mishandled Driver Error' });

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'proxyActive',
    value: function proxyActive() /*sessionId*/{
      return false;
    }
  }, {
    key: 'getProxyAvoidList',
    value: function getProxyAvoidList() /*sessionId*/{
      return [];
    }
  }, {
    key: 'canProxy',
    value: function canProxy() /*sessionId*/{
      return false;
    }
  }]);

  return FakeDriver;
})(_2.MobileJsonWireProtocol);

exports.FakeDriver = FakeDriver;

// this is here to test a failing command that does not throw an error
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvbWpzb253cC9mYWtlLWRyaXZlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7aUJBQTJELE9BQU87O3NCQUNwRCxRQUFROzs7O0lBRWhCLFVBQVU7WUFBVixVQUFVOztBQUVGLFdBRlIsVUFBVSxHQUVDOzBCQUZYLFVBQVU7O0FBR1osK0JBSEUsVUFBVSw2Q0FHSjtBQUNSLFFBQUksQ0FBQyxRQUFRLEdBQUcsY0FBVyxlQUFlLENBQUMsT0FBTyxDQUFDO0FBQ25ELFFBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0FBQ3RCLFFBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0dBQzdCOztlQVBHLFVBQVU7O1dBU0EsdUJBQUMsU0FBUyxFQUFFO0FBQ3hCLFVBQUksQ0FBQyxTQUFTLEVBQUU7QUFDZCxlQUFPLEtBQUssQ0FBQztPQUNkO0FBQ0QsYUFBTyxTQUFTLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQztLQUNyQzs7O1dBRWdCLHlDQUFnQjtBQUMvQixhQUFPLElBQUksQ0FBQztLQUNiOzs7V0FFbUIsdUJBQUMsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQUUsWUFBWTs7OztBQUMxRSxnQkFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUM7O2lCQUNwQixZQUFZOzs7OztnREFDUCxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDOzs7QUFFckMsZ0JBQUksQ0FBQyxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQztBQUMvQyxnQkFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixJQUFJLEVBQUUsQ0FBQztnREFDaEQsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLG9CQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUUsbUJBQW1CLEVBQUUsb0JBQW9CLENBQUMsQ0FBQzs7Ozs7OztLQUVuRjs7O1dBRW9CLHdCQUFDLEdBQUc7d0NBQUssSUFBSTtBQUFKLFlBQUk7Ozs7OztnQkFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQzs7Ozs7a0JBQ04sSUFBSSxVQUFPLHNCQUFzQixFQUFFOzs7QUFFM0MsZ0JBQUksR0FBRyxLQUFLLGVBQWUsRUFBRTtBQUMzQixrQkFBSSxDQUFDLFFBQVEsR0FBRyxjQUFXLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDaEU7OzZDQUNZLElBQUksQ0FBQyxHQUFHLE9BQUMsQ0FBVCxJQUFJLEVBQVMsSUFBSSxDQUFDOzs7Ozs7Ozs7O0tBQ2hDOzs7V0FFbUI7Ozs7QUFDbEIsZ0JBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO0FBQzVCLGdCQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQzs7Ozs7OztLQUN2Qjs7O1dBRWU7Ozs7Z0RBQ1AsVUFBVTs7Ozs7OztLQUNsQjs7O1dBRVksZ0JBQUMsR0FBRzs7OzttRUFDUyxHQUFHOzs7Ozs7O0tBQzVCOzs7V0FFWTs7OztnREFDSixtQkFBbUI7Ozs7Ozs7S0FDM0I7OztXQUVVLGNBQUMsU0FBUzs7OztnREFDWixTQUFTOzs7Ozs7O0tBQ2pCOzs7V0FFYTs7Ozs7Ozs7S0FBSzs7O1dBRUw7Ozs7a0JBQ04sSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDOzs7Ozs7O0tBQzlCOzs7V0FFZ0I7Ozs7a0JBQ1QsSUFBSSxVQUFPLGlCQUFpQixFQUFFOzs7Ozs7O0tBQ3JDOzs7V0FFVyxlQUFDLFNBQVMsRUFBRSxTQUFTOzs7O2dEQUN4QixDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUM7Ozs7Ozs7S0FDOUI7OztXQUVrQixzQkFBQyxFQUFFOzs7O2dEQUNiLEVBQUU7Ozs7Ozs7S0FDVjs7O1dBRWtCLHNCQUFDLE1BQU07Ozs7Z0RBQ2pCLE1BQU07Ozs7Ozs7S0FDZDs7O1dBRTBCLDhCQUFDLElBQUk7Ozs7Z0RBQ3ZCLElBQUk7Ozs7Ozs7S0FDWjs7O1dBRVksZ0JBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPOzs7O2dEQUM5QixDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDOzs7Ozs7O0tBQ25DOzs7V0FFYTs7OztnREFDTCxFQUFFOzs7Ozs7O0tBQ1Y7OztXQUVrQixzQkFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLFNBQVM7Ozs7Z0RBQ3JDLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7Ozs7Ozs7S0FDcEM7OztXQUVjLGtCQUFDLEtBQUssRUFBRSxTQUFTOzs7O2dEQUN2QixDQUFDLEtBQUssRUFBRSxTQUFTLENBQUM7Ozs7Ozs7S0FDMUI7OztXQUVrQjt5Q0FBSSxJQUFJO0FBQUosWUFBSTs7Ozs7O2dEQUNsQixJQUFJOzs7Ozs7O0tBQ1o7OztXQUVjLGtCQUFDLE9BQU87Ozs7Z0RBQ2QsT0FBTzs7Ozs7OztLQUNmOzs7V0FFZSxtQkFBQyxHQUFHOzs7O2dEQUNYLEdBQUc7Ozs7Ozs7S0FDWDs7O1dBRTBCOzs7O2dEQUVsQixFQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLHlCQUF5QixFQUFDOzs7Ozs7O0tBQ3REOzs7V0FFVyxvQ0FBZ0I7QUFDMUIsYUFBTyxLQUFLLENBQUM7S0FDZDs7O1dBRWlCLDBDQUFnQjtBQUNoQyxhQUFPLEVBQUUsQ0FBQztLQUNYOzs7V0FFUSxpQ0FBZ0I7QUFDdkIsYUFBTyxLQUFLLENBQUM7S0FDZDs7O1NBbklHLFVBQVU7OztRQXNJUCxVQUFVLEdBQVYsVUFBVSIsImZpbGUiOiJ0ZXN0L21qc29ud3AvZmFrZS1kcml2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvcnMsIE1vYmlsZUpzb25XaXJlUHJvdG9jb2wsIEJhc2VEcml2ZXIgfSBmcm9tICcuLi8uLic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5jbGFzcyBGYWtlRHJpdmVyIGV4dGVuZHMgTW9iaWxlSnNvbldpcmVQcm90b2NvbCB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5wcm90b2NvbCA9IEJhc2VEcml2ZXIuRFJJVkVSX1BST1RPQ09MLk1KU09OV1A7XG4gICAgdGhpcy5zZXNzaW9uSWQgPSBudWxsO1xuICAgIHRoaXMuandwUHJveHlBY3RpdmUgPSBmYWxzZTtcbiAgfVxuXG4gIHNlc3Npb25FeGlzdHMgKHNlc3Npb25JZCkge1xuICAgIGlmICghc2Vzc2lvbklkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzZXNzaW9uSWQgPT09IHRoaXMuc2Vzc2lvbklkO1xuICB9XG5cbiAgZHJpdmVyRm9yU2Vzc2lvbiAoLypzZXNzaW9uSWQqLykge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlU2Vzc2lvbiAoZGVzaXJlZENhcGFiaWxpdGllcywgcmVxdWlyZWRDYXBhYmlsaXRpZXMsIGNhcGFiaWxpdGllcykge1xuICAgIHRoaXMuc2Vzc2lvbklkID0gXCIxMjM0XCI7XG4gICAgaWYgKGNhcGFiaWxpdGllcykge1xuICAgICAgcmV0dXJuIFt0aGlzLnNlc3Npb25JZCwgY2FwYWJpbGl0aWVzXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZXNpcmVkQ2FwYWJpbGl0aWVzID0gZGVzaXJlZENhcGFiaWxpdGllcztcbiAgICAgIHRoaXMucmVxdWlyZWRDYXBhYmlsaXRpZXMgPSByZXF1aXJlZENhcGFiaWxpdGllcyB8fCB7fTtcbiAgICAgIHJldHVybiBbdGhpcy5zZXNzaW9uSWQsIF8uZXh0ZW5kKHt9LCBkZXNpcmVkQ2FwYWJpbGl0aWVzLCByZXF1aXJlZENhcGFiaWxpdGllcyldO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGV4ZWN1dGVDb21tYW5kIChjbWQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoIXRoaXNbY21kXSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RZZXRJbXBsZW1lbnRlZEVycm9yKCk7XG4gICAgfVxuICAgIGlmIChjbWQgPT09ICdjcmVhdGVTZXNzaW9uJykge1xuICAgICAgdGhpcy5wcm90b2NvbCA9IEJhc2VEcml2ZXIuZGV0ZXJtaW5lUHJvdG9jb2wuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzW2NtZF0oLi4uYXJncyk7XG4gIH1cblxuICBhc3luYyBkZWxldGVTZXNzaW9uICgpIHtcbiAgICB0aGlzLmp3cFByb3h5QWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5zZXNzaW9uSWQgPSBudWxsO1xuICB9XG5cbiAgYXN5bmMgZ2V0U3RhdHVzICgpIHtcbiAgICByZXR1cm4gXCJJJ20gZmluZVwiO1xuICB9XG5cbiAgYXN5bmMgc2V0VXJsICh1cmwpIHtcbiAgICByZXR1cm4gYE5hdmlnYXRlZCB0bzogJHt1cmx9YDtcbiAgfVxuXG4gIGFzeW5jIGdldFVybCAoKSB7XG4gICAgcmV0dXJuIFwiaHR0cDovL2Zvb2Jhci5jb21cIjtcbiAgfVxuXG4gIGFzeW5jIGJhY2sgKHNlc3Npb25JZCkge1xuICAgIHJldHVybiBzZXNzaW9uSWQ7XG4gIH1cblxuICBhc3luYyBmb3J3YXJkICgpIHt9XG5cbiAgYXN5bmMgcmVmcmVzaCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUb28gRnJlc2ghJyk7XG4gIH1cblxuICBhc3luYyBnZXRTZXNzaW9uICgpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vU3VjaERyaXZlckVycm9yKCk7XG4gIH1cblxuICBhc3luYyBjbGljayAoZWxlbWVudElkLCBzZXNzaW9uSWQpIHtcbiAgICByZXR1cm4gW2VsZW1lbnRJZCwgc2Vzc2lvbklkXTtcbiAgfVxuXG4gIGFzeW5jIGltcGxpY2l0V2FpdCAobXMpIHtcbiAgICByZXR1cm4gbXM7XG4gIH1cblxuICBhc3luYyBjbGlja0N1cnJlbnQgKGJ1dHRvbikge1xuICAgIHJldHVybiBidXR0b247XG4gIH1cblxuICBhc3luYyBzZXROZXR3b3JrQ29ubmVjdGlvbiAodHlwZSkge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG5cbiAgYXN5bmMgbW92ZVRvIChlbGVtZW50LCB4T2Zmc2V0LCB5T2Zmc2V0KSB7XG4gICAgcmV0dXJuIFtlbGVtZW50LCB4T2Zmc2V0LCB5T2Zmc2V0XTtcbiAgfVxuXG4gIGFzeW5jIGdldFRleHQgKCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgYXN5bmMgZ2V0QXR0cmlidXRlIChhdHRyLCBlbGVtZW50SWQsIHNlc3Npb25JZCkge1xuICAgIHJldHVybiBbYXR0ciwgZWxlbWVudElkLCBzZXNzaW9uSWRdO1xuICB9XG5cbiAgYXN5bmMgc2V0VmFsdWUgKHZhbHVlLCBlbGVtZW50SWQpIHtcbiAgICByZXR1cm4gW3ZhbHVlLCBlbGVtZW50SWRdO1xuICB9XG5cbiAgYXN5bmMgcGVyZm9ybVRvdWNoICguLi5hcmdzKSB7XG4gICAgcmV0dXJuIGFyZ3M7XG4gIH1cblxuICBhc3luYyBzZXRGcmFtZSAoZnJhbWVJZCkge1xuICAgIHJldHVybiBmcmFtZUlkO1xuICB9XG5cbiAgYXN5bmMgcmVtb3ZlQXBwIChhcHApIHtcbiAgICByZXR1cm4gYXBwO1xuICB9XG5cbiAgYXN5bmMgcmVjZWl2ZUFzeW5jUmVzcG9uc2UgKCkge1xuICAgIC8vIHRoaXMgaXMgaGVyZSB0byB0ZXN0IGEgZmFpbGluZyBjb21tYW5kIHRoYXQgZG9lcyBub3QgdGhyb3cgYW4gZXJyb3JcbiAgICByZXR1cm4ge3N0YXR1czogMTMsIHZhbHVlOiAnTWlzaGFuZGxlZCBEcml2ZXIgRXJyb3InfTtcbiAgfVxuXG4gIHByb3h5QWN0aXZlICgvKnNlc3Npb25JZCovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZ2V0UHJveHlBdm9pZExpc3QgKC8qc2Vzc2lvbklkKi8pIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBjYW5Qcm94eSAoLypzZXNzaW9uSWQqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgeyBGYWtlRHJpdmVyIH07XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
