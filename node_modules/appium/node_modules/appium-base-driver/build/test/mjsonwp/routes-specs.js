require('source-map-support').install();

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _lodash = require('lodash');

var _libMjsonwpRoutes = require('../../lib/mjsonwp/routes');

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

_chai2['default'].should();

describe('MJSONWP', function () {

  // TODO test against an explicit protocol rather than a hash of a previous
  // protocol

  describe('ensure protocol consistency', function () {
    it('should not change protocol between patch versions', function callee$2$0() {
      var shasum, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, url, urlMapping, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value, method, methodMapping, allParams, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, param, hash;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            shasum = _crypto2['default'].createHash('sha1');
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$3$0.prev = 4;
            _iterator = _getIterator(_lodash._.toPairs(_libMjsonwpRoutes.METHOD_MAP));

          case 6:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              context$3$0.next = 65;
              break;
            }

            _step$value = _slicedToArray(_step.value, 2);
            url = _step$value[0];
            urlMapping = _step$value[1];

            shasum.update(url);
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            context$3$0.prev = 14;
            _iterator2 = _getIterator(_lodash._.toPairs(urlMapping));

          case 16:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              context$3$0.next = 48;
              break;
            }

            _step2$value = _slicedToArray(_step2.value, 2);
            method = _step2$value[0];
            methodMapping = _step2$value[1];

            shasum.update(method);
            if (methodMapping.command) {
              shasum.update(methodMapping.command);
            }

            if (!methodMapping.payloadParams) {
              context$3$0.next = 45;
              break;
            }

            allParams = _lodash._.flatten(methodMapping.payloadParams.required);

            if (methodMapping.payloadParams.optional) {
              allParams = allParams.concat(_lodash._.flatten(methodMapping.payloadParams.optional));
            }
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            context$3$0.prev = 28;
            for (_iterator3 = _getIterator(allParams); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              param = _step3.value;

              shasum.update(param);
            }
            context$3$0.next = 36;
            break;

          case 32:
            context$3$0.prev = 32;
            context$3$0.t0 = context$3$0['catch'](28);
            _didIteratorError3 = true;
            _iteratorError3 = context$3$0.t0;

          case 36:
            context$3$0.prev = 36;
            context$3$0.prev = 37;

            if (!_iteratorNormalCompletion3 && _iterator3['return']) {
              _iterator3['return']();
            }

          case 39:
            context$3$0.prev = 39;

            if (!_didIteratorError3) {
              context$3$0.next = 42;
              break;
            }

            throw _iteratorError3;

          case 42:
            return context$3$0.finish(39);

          case 43:
            return context$3$0.finish(36);

          case 44:
            if (methodMapping.payloadParams.wrap) {
              shasum.update('skip');
              shasum.update(methodMapping.payloadParams.wrap);
            }

          case 45:
            _iteratorNormalCompletion2 = true;
            context$3$0.next = 16;
            break;

          case 48:
            context$3$0.next = 54;
            break;

          case 50:
            context$3$0.prev = 50;
            context$3$0.t1 = context$3$0['catch'](14);
            _didIteratorError2 = true;
            _iteratorError2 = context$3$0.t1;

          case 54:
            context$3$0.prev = 54;
            context$3$0.prev = 55;

            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }

          case 57:
            context$3$0.prev = 57;

            if (!_didIteratorError2) {
              context$3$0.next = 60;
              break;
            }

            throw _iteratorError2;

          case 60:
            return context$3$0.finish(57);

          case 61:
            return context$3$0.finish(54);

          case 62:
            _iteratorNormalCompletion = true;
            context$3$0.next = 6;
            break;

          case 65:
            context$3$0.next = 71;
            break;

          case 67:
            context$3$0.prev = 67;
            context$3$0.t2 = context$3$0['catch'](4);
            _didIteratorError = true;
            _iteratorError = context$3$0.t2;

          case 71:
            context$3$0.prev = 71;
            context$3$0.prev = 72;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 74:
            context$3$0.prev = 74;

            if (!_didIteratorError) {
              context$3$0.next = 77;
              break;
            }

            throw _iteratorError;

          case 77:
            return context$3$0.finish(74);

          case 78:
            return context$3$0.finish(71);

          case 79:
            hash = shasum.digest('hex').substring(0, 8);

            // Modify the hash whenever the protocol has intentionally been modified.
            hash.should.equal('a991dc46');

          case 81:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this, [[4, 67, 71, 79], [14, 50, 54, 62], [28, 32, 36, 44], [37,, 39, 43], [55,, 57, 61], [72,, 74, 78]]);
    });
  });

  describe('check route to command name conversion', function () {
    it('should properly lookup correct command name for endpoint with session', function () {
      var cmdName = (0, _libMjsonwpRoutes.routeToCommandName)('/timeouts/implicit_wait', 'POST');
      cmdName.should.equal('implicitWait');
    });

    it('should properly lookup correct command name for endpoint without session', function () {
      var cmdName = (0, _libMjsonwpRoutes.routeToCommandName)('/status', 'GET');
      cmdName.should.equal('getStatus');
    });

    it('should properly lookup correct command name for endpoint without leading slash', function () {
      var cmdName = (0, _libMjsonwpRoutes.routeToCommandName)('status', 'GET');
      cmdName.should.equal('getStatus');
    });

    it('should properly lookup correct command name for fully specified endpoint', function () {
      var cmdName = (0, _libMjsonwpRoutes.routeToCommandName)('/wd/hub/status', 'GET');
      cmdName.should.equal('getStatus');
    });

    it('should not find command name if incorrect input data has been specified', function () {
      var _arr = [['/wd/hub/status', 'POST'], ['/xstatus', 'GET'], ['status', 'POST']];

      for (var _i = 0; _i < _arr.length; _i++) {
        var _arr$_i = _slicedToArray(_arr[_i], 2);

        var route = _arr$_i[0];
        var method = _arr$_i[1];

        var cmdName = (0, _libMjsonwpRoutes.routeToCommandName)(route, method);
        _chai2['default'].should().equal(cmdName, undefined);
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvbWpzb253cC9yb3V0ZXMtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7c0JBRWtCLFFBQVE7O2dDQUNxQiwwQkFBMEI7O3NCQUN0RCxRQUFROzs7O29CQUNWLE1BQU07Ozs7QUFHdkIsa0JBQUssTUFBTSxFQUFFLENBQUM7O0FBRWQsUUFBUSxDQUFDLFNBQVMsRUFBRSxZQUFNOzs7OztBQUt4QixVQUFRLENBQUMsNkJBQTZCLEVBQUUsWUFBTTtBQUM1QyxNQUFFLENBQUMsbURBQW1ELEVBQUU7VUFDbEQsTUFBTSwrRkFDQSxHQUFHLEVBQUUsVUFBVSxxR0FFYixNQUFNLEVBQUUsYUFBYSxFQU12QixTQUFTLHVGQUlKLEtBQUssRUFVaEIsSUFBSTs7Ozs7QUF2Qkosa0JBQU0sR0FBRyxvQkFBTyxVQUFVLENBQUMsTUFBTSxDQUFDOzs7OztxQ0FDUixVQUFFLE9BQU8sOEJBQVk7Ozs7Ozs7OztBQUF6QyxlQUFHO0FBQUUsc0JBQVU7O0FBQ3ZCLGtCQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7OztzQ0FDaUIsVUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDOzs7Ozs7Ozs7QUFBL0Msa0JBQU07QUFBRSx5QkFBYTs7QUFDN0Isa0JBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEIsZ0JBQUksYUFBYSxDQUFDLE9BQU8sRUFBRTtBQUN6QixvQkFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDdEM7O2lCQUNHLGFBQWEsQ0FBQyxhQUFhOzs7OztBQUN6QixxQkFBUyxHQUFHLFVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDOztBQUMvRCxnQkFBSSxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRTtBQUN4Qyx1QkFBUyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBRSxPQUFPLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2FBQy9FOzs7OztBQUNELDJDQUFrQixTQUFTLHlHQUFFO0FBQXBCLG1CQUFLOztBQUNaLG9CQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3RCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNELGdCQUFJLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFO0FBQ3BDLG9CQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RCLG9CQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDakQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlILGdCQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQzs7O0FBRS9DLGdCQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQzs7Ozs7OztLQUMvQixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLHdDQUF3QyxFQUFFLFlBQU07QUFDdkQsTUFBRSxDQUFDLHVFQUF1RSxFQUFFLFlBQU07QUFDaEYsVUFBTSxPQUFPLEdBQUcsMENBQW1CLHlCQUF5QixFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RFLGFBQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0tBQ3RDLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsMEVBQTBFLEVBQUUsWUFBTTtBQUNuRixVQUFNLE9BQU8sR0FBRywwQ0FBbUIsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3JELGFBQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQ25DLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsZ0ZBQWdGLEVBQUUsWUFBTTtBQUN6RixVQUFNLE9BQU8sR0FBRywwQ0FBbUIsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3BELGFBQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQ25DLENBQUMsQ0FBQzs7QUFFSCxNQUFFLENBQUMsMEVBQTBFLEVBQUUsWUFBTTtBQUNuRixVQUFNLE9BQU8sR0FBRywwQ0FBbUIsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUQsYUFBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDbkMsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyx5RUFBeUUsRUFBRSxZQUFNO2lCQUN0RCxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLEVBQzFCLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxFQUNuQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQzs7QUFGaEQsK0NBRWtEOzs7WUFGeEMsS0FBSztZQUFFLE1BQU07O0FBR3JCLFlBQU0sT0FBTyxHQUFHLDBDQUFtQixLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDbEQsMEJBQUssTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztPQUN6QztLQUNGLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztDQUVKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L21qc29ud3Avcm91dGVzLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCB7IF8gfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgTUVUSE9EX01BUCwgcm91dGVUb0NvbW1hbmROYW1lIH0gZnJvbSAnLi4vLi4vbGliL21qc29ud3Avcm91dGVzJztcbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5cbmRlc2NyaWJlKCdNSlNPTldQJywgKCkgPT4ge1xuXG4gIC8vIFRPRE8gdGVzdCBhZ2FpbnN0IGFuIGV4cGxpY2l0IHByb3RvY29sIHJhdGhlciB0aGFuIGEgaGFzaCBvZiBhIHByZXZpb3VzXG4gIC8vIHByb3RvY29sXG5cbiAgZGVzY3JpYmUoJ2Vuc3VyZSBwcm90b2NvbCBjb25zaXN0ZW5jeScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIG5vdCBjaGFuZ2UgcHJvdG9jb2wgYmV0d2VlbiBwYXRjaCB2ZXJzaW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBzaGFzdW0gPSBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMScpO1xuICAgICAgZm9yIChsZXQgW3VybCwgdXJsTWFwcGluZ10gb2YgXy50b1BhaXJzKE1FVEhPRF9NQVApKSB7XG4gICAgICAgIHNoYXN1bS51cGRhdGUodXJsKTtcbiAgICAgICAgZm9yIChsZXQgW21ldGhvZCwgbWV0aG9kTWFwcGluZ10gb2YgXy50b1BhaXJzKHVybE1hcHBpbmcpKSB7XG4gICAgICAgICAgc2hhc3VtLnVwZGF0ZShtZXRob2QpO1xuICAgICAgICAgIGlmIChtZXRob2RNYXBwaW5nLmNvbW1hbmQpIHtcbiAgICAgICAgICAgIHNoYXN1bS51cGRhdGUobWV0aG9kTWFwcGluZy5jb21tYW5kKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1ldGhvZE1hcHBpbmcucGF5bG9hZFBhcmFtcykge1xuICAgICAgICAgICAgbGV0IGFsbFBhcmFtcyA9IF8uZmxhdHRlbihtZXRob2RNYXBwaW5nLnBheWxvYWRQYXJhbXMucmVxdWlyZWQpO1xuICAgICAgICAgICAgaWYgKG1ldGhvZE1hcHBpbmcucGF5bG9hZFBhcmFtcy5vcHRpb25hbCkge1xuICAgICAgICAgICAgICBhbGxQYXJhbXMgPSBhbGxQYXJhbXMuY29uY2F0KF8uZmxhdHRlbihtZXRob2RNYXBwaW5nLnBheWxvYWRQYXJhbXMub3B0aW9uYWwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IHBhcmFtIG9mIGFsbFBhcmFtcykge1xuICAgICAgICAgICAgICBzaGFzdW0udXBkYXRlKHBhcmFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXRob2RNYXBwaW5nLnBheWxvYWRQYXJhbXMud3JhcCkge1xuICAgICAgICAgICAgICBzaGFzdW0udXBkYXRlKCdza2lwJyk7XG4gICAgICAgICAgICAgIHNoYXN1bS51cGRhdGUobWV0aG9kTWFwcGluZy5wYXlsb2FkUGFyYW1zLndyYXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IGhhc2ggPSBzaGFzdW0uZGlnZXN0KCdoZXgnKS5zdWJzdHJpbmcoMCwgOCk7XG4gICAgICAvLyBNb2RpZnkgdGhlIGhhc2ggd2hlbmV2ZXIgdGhlIHByb3RvY29sIGhhcyBpbnRlbnRpb25hbGx5IGJlZW4gbW9kaWZpZWQuXG4gICAgICBoYXNoLnNob3VsZC5lcXVhbCgnYTk5MWRjNDYnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NoZWNrIHJvdXRlIHRvIGNvbW1hbmQgbmFtZSBjb252ZXJzaW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcHJvcGVybHkgbG9va3VwIGNvcnJlY3QgY29tbWFuZCBuYW1lIGZvciBlbmRwb2ludCB3aXRoIHNlc3Npb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBjbWROYW1lID0gcm91dGVUb0NvbW1hbmROYW1lKCcvdGltZW91dHMvaW1wbGljaXRfd2FpdCcsICdQT1NUJyk7XG4gICAgICBjbWROYW1lLnNob3VsZC5lcXVhbCgnaW1wbGljaXRXYWl0Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb3Blcmx5IGxvb2t1cCBjb3JyZWN0IGNvbW1hbmQgbmFtZSBmb3IgZW5kcG9pbnQgd2l0aG91dCBzZXNzaW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgY21kTmFtZSA9IHJvdXRlVG9Db21tYW5kTmFtZSgnL3N0YXR1cycsICdHRVQnKTtcbiAgICAgIGNtZE5hbWUuc2hvdWxkLmVxdWFsKCdnZXRTdGF0dXMnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHJvcGVybHkgbG9va3VwIGNvcnJlY3QgY29tbWFuZCBuYW1lIGZvciBlbmRwb2ludCB3aXRob3V0IGxlYWRpbmcgc2xhc2gnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjbWROYW1lID0gcm91dGVUb0NvbW1hbmROYW1lKCdzdGF0dXMnLCAnR0VUJyk7XG4gICAgICBjbWROYW1lLnNob3VsZC5lcXVhbCgnZ2V0U3RhdHVzJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHByb3Blcmx5IGxvb2t1cCBjb3JyZWN0IGNvbW1hbmQgbmFtZSBmb3IgZnVsbHkgc3BlY2lmaWVkIGVuZHBvaW50JywgKCkgPT4ge1xuICAgICAgY29uc3QgY21kTmFtZSA9IHJvdXRlVG9Db21tYW5kTmFtZSgnL3dkL2h1Yi9zdGF0dXMnLCAnR0VUJyk7XG4gICAgICBjbWROYW1lLnNob3VsZC5lcXVhbCgnZ2V0U3RhdHVzJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG5vdCBmaW5kIGNvbW1hbmQgbmFtZSBpZiBpbmNvcnJlY3QgaW5wdXQgZGF0YSBoYXMgYmVlbiBzcGVjaWZpZWQnLCAoKSA9PiB7XG4gICAgICBmb3IgKGxldCBbcm91dGUsIG1ldGhvZF0gb2YgW1snL3dkL2h1Yi9zdGF0dXMnLCAnUE9TVCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJy94c3RhdHVzJywgJ0dFVCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJ3N0YXR1cycsICdQT1NUJ11dKSB7XG4gICAgICAgIGNvbnN0IGNtZE5hbWUgPSByb3V0ZVRvQ29tbWFuZE5hbWUocm91dGUsIG1ldGhvZCk7XG4gICAgICAgIGNoYWkuc2hvdWxkKCkuZXF1YWwoY21kTmFtZSwgdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
