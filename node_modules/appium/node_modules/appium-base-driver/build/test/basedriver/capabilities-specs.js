'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _libBasedriverCapabilities = require('../../lib/basedriver/capabilities');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

_chai2['default'].use(_chaiAsPromised2['default']);
_chai2['default'].should();

describe('caps', function () {

  // Tests based on: https://www.w3.org/TR/webdriver/#dfn-validate-caps
  describe('#validateCaps', function () {
    it('returns invalid argument error if "capability" is not a JSON object (1)', function () {
      var _arr = [undefined, null, 1, true, 'string'];

      var _loop = function () {
        var arg = _arr[_i];
        (function () {
          (0, _libBasedriverCapabilities.validateCaps)(arg);
        }).should['throw'](/must be a JSON object/);
      };

      for (var _i = 0; _i < _arr.length; _i++) {
        _loop();
      }
    });

    it('returns result {} by default if caps is empty object and no constraints provided (2)', function () {
      (0, _libBasedriverCapabilities.validateCaps)({}).should.deep.equal({});
    });

    describe('throws errors if constraints are not met', function () {
      it('returns invalid argument error if "present" constraint not met on property', function () {
        (function () {
          return (0, _libBasedriverCapabilities.validateCaps)({}, { foo: { presence: true } });
        }).should['throw'](/foo can't be blank/);
      });

      it('returns the capability that was passed in if "skipPresenceConstraint" is false', function () {
        (0, _libBasedriverCapabilities.validateCaps)({}, { foo: { presence: true } }, true).should.deep.equal({});
      });

      it('returns invalid argument error if "isString" constraint not met on property', function () {
        (function () {
          return (0, _libBasedriverCapabilities.validateCaps)({ foo: 1 }, { foo: { isString: true } });
        }).should['throw'](/foo must be of type string/);
      });

      it('returns invalid argument error if "isNumber" constraint not met on property', function () {
        (function () {
          return (0, _libBasedriverCapabilities.validateCaps)({ foo: 'bar' }, { foo: { isNumber: true } });
        }).should['throw'](/foo must be of type number/);
      });

      it('returns invalid argument error if "isBoolean" constraint not met on property', function () {
        (function () {
          return (0, _libBasedriverCapabilities.validateCaps)({ foo: 'bar' }, { foo: { isBoolean: true } });
        }).should['throw'](/foo must be of type boolean/);
      });

      it('returns invalid argument error if "inclusion" constraint not met on property', function () {
        (function () {
          return (0, _libBasedriverCapabilities.validateCaps)({ foo: '3' }, { foo: { inclusionCaseInsensitive: ['1', '2'] } });
        }).should['throw'](/foo 3 not part of 1,2./);
      });

      it('returns invalid argument error if "inclusionCaseInsensitive" constraint not met on property', function () {
        (function () {
          return (0, _libBasedriverCapabilities.validateCaps)({ foo: 'a' }, { foo: { inclusion: ['A', 'B', 'C'] } });
        }).should['throw'](/foo a is not included in the list/);
      });
    });

    it('should not throw errors if constraints are met', function () {
      var caps = {
        number: 1,
        string: 'string',
        present: 'present',
        extra: 'extra'
      };

      var constraints = {
        number: { isNumber: true },
        string: { isString: true },
        present: { presence: true },
        notPresent: { presence: false }
      };

      (0, _libBasedriverCapabilities.validateCaps)(caps, constraints).should.deep.equal(caps);
    });
  });

  // Tests based on: https://www.w3.org/TR/webdriver/#dfn-merging-caps
  describe('#mergeCaps', function () {
    it('returns a result that is {} by default (1)', function () {
      (0, _libBasedriverCapabilities.mergeCaps)().should.deep.equal({});
    });

    it('returns a result that matches primary by default (2, 3)', function () {
      (0, _libBasedriverCapabilities.mergeCaps)({ hello: 'world' }).should.deep.equal({ hello: 'world' });
    });

    it('returns invalid argument error if primary and secondary have matching properties (4)', function () {
      (function () {
        return (0, _libBasedriverCapabilities.mergeCaps)({ hello: 'world' }, { hello: 'whirl' });
      }).should['throw'](/property hello should not exist on both primary and secondary/);
    });

    it('returns a result with keys from primary and secondary together', function () {
      var primary = {
        a: 'a',
        b: 'b'
      };
      var secondary = {
        c: 'c',
        d: 'd'
      };
      (0, _libBasedriverCapabilities.mergeCaps)(primary, secondary).should.deep.equal({
        a: 'a', b: 'b', c: 'c', d: 'd'
      });
    });
  });

  // Tests based on: https://www.w3.org/TR/webdriver/#dfn-matching-caps
  describe('#matchCaps', function () {
    // TODO: Do we need this?
  });

  // Tests based on: https://www.w3.org/TR/webdriver/#processing-caps
  describe('#parseCaps', function () {
    var caps = undefined;

    beforeEach(function () {
      caps = {};
    });

    it('should return invalid argument if no caps object provided', function () {
      (function () {
        return (0, _libBasedriverCapabilities.parseCaps)();
      }).should['throw'](/must be a JSON object/);
    });

    it('sets "requiredCaps" to property named "alwaysMatch" (2)', function () {
      caps.alwaysMatch = { hello: 'world' };
      (0, _libBasedriverCapabilities.parseCaps)(caps).requiredCaps.should.deep.equal(caps.alwaysMatch);
    });

    it('sets "requiredCaps" to empty JSON object if "alwaysMatch" is not an object (2.1)', function () {
      (0, _libBasedriverCapabilities.parseCaps)(caps).requiredCaps.should.deep.equal({});
    });

    it('returns invalid argument error if "requiredCaps" don\'t match "constraints" (2.2)', function () {
      caps.alwaysMatch = { foo: 1 };
      (function () {
        return (0, _libBasedriverCapabilities.parseCaps)(caps, { foo: { isString: true } });
      }).should['throw'](/foo must be of type string/);
    });

    it('sets "allFirstMatchCaps" to property named "firstMatch" (3)', function () {
      (0, _libBasedriverCapabilities.parseCaps)({}, []).allFirstMatchCaps.should.deep.equal([]);
    });

    it('sets "allFirstMatchCaps" to [] if "firstMatch" is undefined (3.1)', function () {
      (0, _libBasedriverCapabilities.parseCaps)({}).allFirstMatchCaps.should.deep.equal([]);
    });

    it('returns invalid argument error if "firstMatch" is not an array and is not undefined (3.2)', function () {
      var _arr2 = [null, 1, true, 'string'];

      for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
        var arg = _arr2[_i2];
        caps.firstMatch = arg;
        (function () {
          (0, _libBasedriverCapabilities.parseCaps)(caps);
        }).should['throw'](/must be a JSON array or undefined/);
      }
    });

    it('has "validatedFirstMatchCaps" property that is [] by default (4)', function () {
      (0, _libBasedriverCapabilities.parseCaps)(caps).validatedFirstMatchCaps.should.deep.equal([]);
    });

    describe('returns a "validatedFirstMatchCaps" array (5)', function () {
      it('that equals "firstMatch" if firstMatch is one empty object and there are no constraints', function () {
        caps.firstMatch = [{}];
        (0, _libBasedriverCapabilities.parseCaps)(caps).validatedFirstMatchCaps.should.deep.equal(caps.firstMatch);
      });

      it('returns invalid argument error if firstMatch array\'s first argument fails constraints', function () {
        caps.firstMatch = [{}];
        (function () {
          return (0, _libBasedriverCapabilities.parseCaps)(caps, { foo: { presence: true } });
        }).should['throw'](/foo can't be blank/);
      });

      it('that equals firstMatch if firstMatch contains two objects that pass the provided constraints', function () {
        caps.alwaysMatch = {
          foo: 'bar'
        };
        caps.firstMatch = [{ foo: 'bar1' }, { foo: 'bar2' }];

        var constraints = {
          foo: {
            presence: true,
            isString: true
          }
        };

        (0, _libBasedriverCapabilities.parseCaps)(caps, constraints).validatedFirstMatchCaps.should.deep.equal(caps.firstMatch);
      });

      it('returns invalid argument error if the firstMatch[2] is not an object', function () {
        caps.firstMatch = [{ foo: 'bar' }, 'foo'];
        (function () {
          return (0, _libBasedriverCapabilities.parseCaps)(caps, {});
        }).should['throw'](/must be a JSON object/);
      });
    });

    describe('returns a matchedCaps object (6)', function () {
      beforeEach(function () {
        caps.alwaysMatch = { hello: 'world' };
      });

      it('which is same as alwaysMatch if firstMatch array is not provided', function () {
        (0, _libBasedriverCapabilities.parseCaps)(caps).matchedCaps.should.deep.equal({ hello: 'world' });
      });

      it('merges caps together', function () {
        caps.firstMatch = [{ foo: 'bar' }];
        (0, _libBasedriverCapabilities.parseCaps)(caps).matchedCaps.should.deep.equal({ hello: 'world', foo: 'bar' });
      });

      it('with merged caps', function () {
        caps.firstMatch = [{ hello: 'bar', foo: 'foo' }, { foo: 'bar' }];
        (0, _libBasedriverCapabilities.parseCaps)(caps).matchedCaps.should.deep.equal({ hello: 'world', foo: 'bar' });
      });
    });
  });

  describe('#processCaps', function () {
    it('should return "alwaysMatch" if "firstMatch" and "constraints" were not provided', function () {
      (0, _libBasedriverCapabilities.processCapabilities)({}).should.deep.equal({});
    });

    it('should return merged caps', function () {
      (0, _libBasedriverCapabilities.processCapabilities)({
        alwaysMatch: { hello: 'world' },
        firstMatch: [{ foo: 'bar' }]
      }).should.deep.equal({ hello: 'world', foo: 'bar' });
    });

    it('should strip out the "appium:" prefix for non-standard capabilities', function () {
      (0, _libBasedriverCapabilities.processCapabilities)({
        alwaysMatch: { 'appium:hello': 'world' },
        firstMatch: [{ 'appium:foo': 'bar' }]
      }).should.deep.equal({ hello: 'world', foo: 'bar' });
    });

    it('should throw an exception if a standard capability (https://www.w3.org/TR/webdriver/#dfn-table-of-standard-capabilities) is prefixed', function () {
      (function () {
        return (0, _libBasedriverCapabilities.processCapabilities)({
          alwaysMatch: { 'appium:platformName': 'Whatevz' },
          firstMatch: [{ 'appium:browserName': 'Anything' }]
        });
      }).should['throw'](/standard capabilities/);
    });

    it('should not throw an exception if presence constraint is not met on a firstMatch capability', function () {
      var caps = (0, _libBasedriverCapabilities.processCapabilities)({
        alwaysMatch: { 'platformName': 'Fake', 'appium:fakeCap': 'foobar' },
        firstMatch: [{ 'foo': 'bar' }]
      }, {
        platformName: {
          presence: true
        },
        fakeCap: {
          presence: true
        }
      });

      caps.platformName.should.equal('Fake');
      caps.fakeCap.should.equal('foobar');
      caps.foo.should.equal('bar');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
