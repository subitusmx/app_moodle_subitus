'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function isNumber(o) {
  return _lodash2['default'].isNumber(o) || !_lodash2['default'].isNaN(parseInt(o, 10)) || !_lodash2['default'].isNaN(parseFloat(o));
}

function msValidator(ms) {
  if (!_lodash2['default'].isNumber(ms) || ms < 0) {
    throw new Error('Wait ms must be a number equal to 0 or greater');
  }
}

var validators = {
  setUrl: function setUrl(url) {
    // either an `xyz://`, `about:`, or `data:` scheme is allowed
    if (!url || !url.match(/^([a-zA-Z0-9_+.-]+:\/\/)|(about:)|(data:)/)) {
      throw new Error('Url or Uri must start with <scheme>://');
    }
  },
  implicitWait: function implicitWait(ms) {
    msValidator(ms);
  },
  asyncScriptTimeout: function asyncScriptTimeout(ms) {
    msValidator(ms);
  },
  timeouts: function timeouts(type, ms) {
    msValidator(ms);
    if (!_lodash2['default'].includes(['script', 'implicit', 'page load', 'command'], type)) {
      throw new Error('\'' + type + '\' is not a valid timeout type');
    }
  },
  clickCurrent: function clickCurrent(button) {
    if (!(isNumber(button) || _lodash2['default'].isUndefined(button)) || button < 0 || button > 2) {
      throw new Error('Click button must be 0, 1, or 2');
    }
  },
  setNetworkConnection: function setNetworkConnection(type) {
    if (!isNumber(type) || [0, 1, 2, 4, 6].indexOf(type) === -1) {
      throw new Error('Network type must be one of 0, 1, 2, 4, 6');
    }
  }
};

exports.validators = validators;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9tanNvbndwL3ZhbGlkYXRvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7c0JBQWMsUUFBUTs7OztBQUd0QixTQUFTLFFBQVEsQ0FBRSxDQUFDLEVBQUU7QUFDcEIsU0FBTyxvQkFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxvQkFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzlFOztBQUVELFNBQVMsV0FBVyxDQUFFLEVBQUUsRUFBRTtBQUN4QixNQUFJLENBQUMsb0JBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUU7QUFDN0IsVUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0dBQ25FO0NBQ0Y7O0FBRUQsSUFBTSxVQUFVLEdBQUc7QUFDakIsUUFBTSxFQUFFLGdCQUFDLEdBQUcsRUFBSzs7QUFFZixRQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxFQUFFO0FBQ25FLFlBQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztLQUMzRDtHQUNGO0FBQ0QsY0FBWSxFQUFFLHNCQUFDLEVBQUUsRUFBSztBQUNwQixlQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDakI7QUFDRCxvQkFBa0IsRUFBRSw0QkFBQyxFQUFFLEVBQUs7QUFDMUIsZUFBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ2pCO0FBQ0QsVUFBUSxFQUFFLGtCQUFDLElBQUksRUFBRSxFQUFFLEVBQUs7QUFDdEIsZUFBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hCLFFBQUksQ0FBQyxvQkFBRSxRQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRTtBQUNyRSxZQUFNLElBQUksS0FBSyxRQUFLLElBQUksb0NBQWdDLENBQUM7S0FDMUQ7R0FDRjtBQUNELGNBQVksRUFBRSxzQkFBQyxNQUFNLEVBQUs7QUFDeEIsUUFBSSxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxvQkFBRSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUEsQUFBQyxJQUFLLE1BQU0sR0FBRyxDQUFDLElBQUksTUFBTSxHQUFHLENBQUMsQUFBQyxFQUFFO0FBQzlFLFlBQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztLQUNwRDtHQUNGO0FBQ0Qsc0JBQW9CLEVBQUUsOEJBQUMsSUFBSSxFQUFLO0FBQzlCLFFBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO0FBQzNELFlBQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztLQUM5RDtHQUNGO0NBQ0YsQ0FBQzs7UUFFTyxVQUFVLEdBQVYsVUFBVSIsImZpbGUiOiJsaWIvbWpzb253cC92YWxpZGF0b3JzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuXG5mdW5jdGlvbiBpc051bWJlciAobykge1xuICByZXR1cm4gXy5pc051bWJlcihvKSB8fCAhXy5pc05hTihwYXJzZUludChvLCAxMCkpIHx8ICFfLmlzTmFOKHBhcnNlRmxvYXQobykpO1xufVxuXG5mdW5jdGlvbiBtc1ZhbGlkYXRvciAobXMpIHtcbiAgaWYgKCFfLmlzTnVtYmVyKG1zKSB8fCBtcyA8IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1dhaXQgbXMgbXVzdCBiZSBhIG51bWJlciBlcXVhbCB0byAwIG9yIGdyZWF0ZXInKTtcbiAgfVxufVxuXG5jb25zdCB2YWxpZGF0b3JzID0ge1xuICBzZXRVcmw6ICh1cmwpID0+IHtcbiAgICAvLyBlaXRoZXIgYW4gYHh5ejovL2AsIGBhYm91dDpgLCBvciBgZGF0YTpgIHNjaGVtZSBpcyBhbGxvd2VkXG4gICAgaWYgKCF1cmwgfHwgIXVybC5tYXRjaCgvXihbYS16QS1aMC05XysuLV0rOlxcL1xcLyl8KGFib3V0Oil8KGRhdGE6KS8pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VybCBvciBVcmkgbXVzdCBzdGFydCB3aXRoIDxzY2hlbWU+Oi8vJyk7XG4gICAgfVxuICB9LFxuICBpbXBsaWNpdFdhaXQ6IChtcykgPT4ge1xuICAgIG1zVmFsaWRhdG9yKG1zKTtcbiAgfSxcbiAgYXN5bmNTY3JpcHRUaW1lb3V0OiAobXMpID0+IHtcbiAgICBtc1ZhbGlkYXRvcihtcyk7XG4gIH0sXG4gIHRpbWVvdXRzOiAodHlwZSwgbXMpID0+IHtcbiAgICBtc1ZhbGlkYXRvcihtcyk7XG4gICAgaWYgKCFfLmluY2x1ZGVzKFsnc2NyaXB0JywgJ2ltcGxpY2l0JywgJ3BhZ2UgbG9hZCcsICdjb21tYW5kJ10sIHR5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCcke3R5cGV9JyBpcyBub3QgYSB2YWxpZCB0aW1lb3V0IHR5cGVgKTtcbiAgICB9XG4gIH0sXG4gIGNsaWNrQ3VycmVudDogKGJ1dHRvbikgPT4ge1xuICAgIGlmICghKGlzTnVtYmVyKGJ1dHRvbikgfHwgXy5pc1VuZGVmaW5lZChidXR0b24pKSB8fCAoYnV0dG9uIDwgMCB8fCBidXR0b24gPiAyKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDbGljayBidXR0b24gbXVzdCBiZSAwLCAxLCBvciAyJyk7XG4gICAgfVxuICB9LFxuICBzZXROZXR3b3JrQ29ubmVjdGlvbjogKHR5cGUpID0+IHtcbiAgICBpZiAoIWlzTnVtYmVyKHR5cGUpIHx8IFswLCAxLCAyLCA0LCA2XS5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZXR3b3JrIHR5cGUgbXVzdCBiZSBvbmUgb2YgMCwgMSwgMiwgNCwgNicpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IHsgdmFsaWRhdG9ycyB9O1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
