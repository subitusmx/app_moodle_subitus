'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.hasContent = hasContent;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function hasContent(val) {
  return _lodash2['default'].isString(val) && val !== "";
}

// return true if the the value is not undefined, null, or NaN.
function hasValue(val) {
  var hasVal = false;
  // avoid incorrectly evaluating `0` as false
  if (_lodash2['default'].isNumber(val)) {
    hasVal = !_lodash2['default'].isNaN(val);
  } else {
    hasVal = !_lodash2['default'].isUndefined(val) && !_lodash2['default'].isNull(val);
  }

  return hasVal;
}

// escape spaces in string, for commandline calls
function escapeSpace(str) {
  return str.split(/ /).join('\\ ');
}

function escapeSpecialChars(str, quoteEscape) {
  if (typeof str !== "string") {
    return str;
  }
  if (typeof quoteEscape === "undefined") {
    quoteEscape = false;
  }
  str = str.replace(/[\\]/g, '\\\\').replace(/[\/]/g, '\\/').replace(/[\b]/g, '\\b').replace(/[\f]/g, '\\f').replace(/[\n]/g, '\\n').replace(/[\r]/g, '\\r').replace(/[\t]/g, '\\t').replace(/[\"]/g, '\\"').replace(/\\'/g, "\\'");
  if (quoteEscape) {
    var re = new RegExp(quoteEscape, "g");
    str = str.replace(re, '\\' + quoteEscape);
  }
  return str;
}

function localIp() {
  var ip = _lodash2['default'].chain(_os2['default'].networkInterfaces()).values().flatten().filter(function (val) {
    return val.family === 'IPv4' && val.internal === false;
  }).map('address').first().value();
  return ip;
}

/*
 * Creates a promise that is cancellable, and will timeout
 * after `ms` delay
 */
function cancellableDelay(ms) {
  var timer = undefined;
  return new _bluebird2['default'].Promise(function (resolve) {
    timer = setTimeout(function () {
      resolve();
    }, ms);
  }).cancellable()['catch'](_bluebird2['default'].CancellationError, function (err) {
    // eslint-disable-line promise/prefer-await-to-callbacks
    clearTimeout(timer);
    throw err;
  });
}

function multiResolve(roots) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return roots.map(function (root) {
    return _path2['default'].resolve.apply(_path2['default'], [root].concat(args));
  });
}

/*
 * Parses an object if possible. Otherwise returns the object without parsing.
 */
function safeJsonParse(obj) {
  try {
    obj = JSON.parse(obj);
  } catch (ign) {
    // ignore: this is not json parsable
  }
  return obj;
}

/*
 * Removes the wrapper from element, if it exists.
 *   { ELEMENT: 4 } becomes 4
 */
function unwrapElement(el) {
  if (typeof el === 'object' && el.ELEMENT) {
    return el.ELEMENT;
  }
  return el;
}

/*
 * Returns object consisting of all properties in the original element
 * which were truthy given the predicate.
 * If the predicate is
 *   * missing - it will remove all properties whose values are `undefined`
 *   * a scalar - it will test all properties' values against that value
 *   * a function - it will pass each value and the original object into the function
 */
function filterObject(obj, predicate) {
  var newObj = _lodash2['default'].clone(obj);
  if (_lodash2['default'].isUndefined(predicate)) {
    // remove any element from the object whose value is undefined
    predicate = function (v) {
      return !_lodash2['default'].isUndefined(v);
    };
  } else if (!_lodash2['default'].isFunction(predicate)) {
    (function () {
      // make predicate into a function
      var valuePredicate = predicate;
      predicate = function (v) {
        return v === valuePredicate;
      };
    })();
  }
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(_Object$keys(obj)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var key = _step.value;

      if (!predicate(obj[key], obj)) {
        delete newObj[key];
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return newObj;
}

exports.hasValue = hasValue;
exports.escapeSpace = escapeSpace;
exports.escapeSpecialChars = escapeSpecialChars;
exports.localIp = localIp;
exports.cancellableDelay = cancellableDelay;
exports.multiResolve = multiResolve;
exports.safeJsonParse = safeJsonParse;
exports.unwrapElement = unwrapElement;
exports.filterObject = filterObject;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
