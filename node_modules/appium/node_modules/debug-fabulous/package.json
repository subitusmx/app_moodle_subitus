{
  "name": "debug-fabulous",
  "version": "1.0.0",
  "description": "visionmedia debug extensions rolled into one",
  "main": "index.js",
  "scripts": {
    "lint": "eslint !./node_modules *.js ./**/*.js",
    "mocha": "mocha",
    "test": "npm run lint && mocha ./test/**/*test.js ./test/*.test.js"
  },
  "repository": {
    "type": "git",
    "url": "http://www.github.com/nmccready/debug-fabulous"
  },
  "keywords": [
    "debug",
    "lazy",
    "lazy-eval"
  ],
  "author": {
    "name": "Nicholas McCready"
  },
  "license": "MIT",
  "dependencies": {
    "debug": "3.X",
    "memoizee": "0.4.X",
    "object-assign": "4.X"
  },
  "devDependencies": {
    "JSONStream": "1.X",
    "chai": "4.X",
    "eslint": "4.X",
    "hook-std": "0.X",
    "memwatch-next": "0.3.X",
    "mocha": "4.X"
  },
  "readme": "# debug-fabulous [![NPM version][npm-image]][npm-url] [![build status][travis-image]][travis-url]\n\n## Install\n\n`npm install --save debug-fabulous`\n\n## Purpose:\n\nWrapper / Extension around [visionmedia's debug](https://github.com/visionmedia/debug) to allow lazy evaluation of debugging via closure handling.\n\n## Why would I consider using this library?\n\nOne on the main utilities added to this library is lazy log level evaluation. This allows whatever log strings to only be created and evaluated if a log level is active. This can considerably reduce the amount of memory used in logging when you are not using.\n\nThis is important as this results in no-excuse for not using logging in your applications for performance reasons.\n\n### Proof\n\nFor analysis of the performance results are in [perfWith.out](./test/perf/perfWith.out) and [perfWithout.out](./test/perf/perfWithout.out).\n\nIn summary, the tests using this library are using 3 times less memory for the same logging statements (when the log levels are disabled).\n\n## This library essentially wraps two things:\n\n- [lazy-eval](./src/lazy-eval.js): debug closure handling\n- [spawn](./src/spawn.js): spawns off existing namespaces for a sub namespace.\n\n## Example:\n\nFor usage see the [tests](./test) or the example below.\n\n```js\nvar debug = require('')();\n// force namespace to be enabled otherwise it assumes process.env.DEBUG is setup\n// debug.save('namespace');\n// debug.enable(debug.load())\ndebug = debug('namespace'); // debugger in the namespace\ndebug(function(){return 'something to log' + someLargeHarryString;});\ndebug(() => 'something to log ${someLargeHarryString}');\ndebug('small out'); // prints namespace small out\nvar childDbg = debug.spawn('child'); // debugger in the namespace:child\nchildDbg('small out'); // prints namespace:child small out\nvar grandChildDbg = debug.spawn('grandChild'); // debugger in the namespace:child:grandChild\ngrandChildDbg('small out'); // prints namespace:child:grandChild small out\n```\n\n[npm-image]: https://img.shields.io/npm/v/debug-fabulous.svg\n[npm-url]: https://www.npmjs.com/package/debug-fabulous\n[travis-image]: https://img.shields.io/travis/nmccready/debug-fabulous.svg\n[travis-url]: https://travis-ci.org/nmccready/debug-fabulous\n",
  "readmeFilename": "README.md",
  "_id": "debug-fabulous@1.0.0",
  "_shasum": "57f6648646097b1b0849dcda0017362c1ec00f8b",
  "_resolved": "https://registry.npmjs.org/debug-fabulous/-/debug-fabulous-1.0.0.tgz",
  "_from": "https://registry.npmjs.org/debug-fabulous/-/debug-fabulous-1.0.0.tgz"
}
