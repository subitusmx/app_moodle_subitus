'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _simulatorXcode8 = require('./simulator-xcode-8');

var _simulatorXcode82 = _interopRequireDefault(_simulatorXcode8);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _asyncLock = require('async-lock');

var _asyncLock2 = _interopRequireDefault(_asyncLock);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _nodeSimctl = require('node-simctl');

var _asyncbox = require('asyncbox');

var SIMULATOR_SHUTDOWN_TIMEOUT = 15 * 1000;
var startupLock = new _asyncLock2['default']();
var preferencesPlistGuard = new _asyncLock2['default']();

var SimulatorXcode9 = (function (_SimulatorXcode8) {
  _inherits(SimulatorXcode9, _SimulatorXcode8);

  function SimulatorXcode9(udid, xcodeVersion) {
    _classCallCheck(this, SimulatorXcode9);

    _get(Object.getPrototypeOf(SimulatorXcode9.prototype), 'constructor', this).call(this, udid, xcodeVersion);
  }

  /**
   * @typedef {Object} DevicePreferences
   * @property {number} SimulatorExternalDisplay - TBD. Example value: 2.114
   * @property {string} ChromeTint - TBD. Example value: ''
   * @property {number} SimulatorWindowLastScale - Scale value for the particular Simulator window.
   *                                               1.0 means 100% scale.
   * @property {string} SimulatorWindowOrientation - Simulator window orientation. Possible values are:
   *                                                 'Portrait', 'LandscapeLeft', 'PortraitUpsideDown' and 'LandscapeRight'.
   * @property {number} SimulatorWindowRotationAngle - Window rotation angle. This value is expected to be in sync
   *                                                   with _SimulatorWindowOrientation_. The corresponding values are:
   *                                                   0, 90, 180 and 270.
   * @property {string} SimulatorWindowCenter - The coordinates of Simulator's window center in pixels,
   *                                            for example '{-1294.5, 775.5}'.
   */

  /**
   * @typedef {Object} CommonPreferences
   * @property {boolean} ConnectHardwareKeyboard - Whether to connect hardware keyboard
   */

  /**
   * Executes given Simulator with options. The Simulator will not be restarted if
   * it is already running and the current UI state matches to `isHeadless` option.
   * @override
   *
   * @param {object} opts - One or more of available Simulator options:
   *   - {string} scaleFactor: can be one of ['1.0', '0.75', '0.5', '0.33', '0.25'].
   *   Defines the window scale value for the UI client window for the current Simulator.
   *   Equals to null by default, which keeps the current scale unchanged.
   *   - {boolean} connectHardwareKeyboard: whether to connect the hardware keyboard to the
   *   Simulator UI client. Equals to false by default.
   *   - {number} startupTimeout: number of milliseconds to wait until Simulator booting
   *   process is completed. The default timeout will be used if not set explicitly.
   *   - {boolean} isHeadless: whether to start the Simulator in headless mode (with UI
   *   client invisible). `false` by default.
   *   - {DevicePreferences} devicePreferences: preferences of the newly created Simulator
   *   device
   */

  _createClass(SimulatorXcode9, [{
    key: 'run',
    value: function run() {
      var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var commonPreferences, bootSimulator, waitForShutdown, shouldWaitForBoot, startTime;
      return _regeneratorRuntime.async(function run$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            opts = _Object$assign({
              devicePreferences: {},
              isHeadless: false,
              startupTimeout: this.startupTimeout
            }, opts);
            if (opts.scaleFactor) {
              opts.devicePreferences.SimulatorWindowLastScale = parseFloat(opts.scaleFactor);
            }
            commonPreferences = _lodash2['default'].isBoolean(opts.connectHardwareKeyboard) ? { ConnectHardwareKeyboard: opts.connectHardwareKeyboard } : {};

            if (!(!_lodash2['default'].isEmpty(opts.devicePreferences) || !_lodash2['default'].isEmpty(commonPreferences))) {
              context$2$0.next = 6;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.updatePreferences(opts.devicePreferences, commonPreferences));

          case 6:
            bootSimulator = function bootSimulator() {
              return _regeneratorRuntime.async(function bootSimulator$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.prev = 0;
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap((0, _nodeSimctl.bootDevice)(this.udid));

                  case 3:
                    context$3$0.next = 8;
                    break;

                  case 5:
                    context$3$0.prev = 5;
                    context$3$0.t0 = context$3$0['catch'](0);

                    _logger2['default'].warn('\'xcrun simctl boot ' + this.udid + '\' command has returned non-zero code. The problem was: ' + context$3$0.t0.stderr);

                  case 8:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this, [[0, 5]]);
            };

            waitForShutdown = function waitForShutdown() {
              return _regeneratorRuntime.async(function waitForShutdown$(context$3$0) {
                var _this2 = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$3$0() {
                      var _ref, state;

                      return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                        while (1) switch (context$4$0.prev = context$4$0.next) {
                          case 0:
                            context$4$0.next = 2;
                            return _regeneratorRuntime.awrap(this.stat());

                          case 2:
                            _ref = context$4$0.sent;
                            state = _ref.state;
                            return context$4$0.abrupt('return', state === 'Shutdown');

                          case 5:
                          case 'end':
                            return context$4$0.stop();
                        }
                      }, null, _this2);
                    }, { waitMs: SIMULATOR_SHUTDOWN_TIMEOUT, intervalMs: 500 }));

                  case 2:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            };

            shouldWaitForBoot = true;
            startTime = process.hrtime();
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(startupLock.acquire(this.uiClientBundleId, function callee$2$0() {
              var stat, serverState, isServerRunning, isUIClientRunning;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap(this.stat());

                  case 2:
                    stat = context$3$0.sent;
                    serverState = stat.state;
                    isServerRunning = serverState === 'Booted';
                    context$3$0.next = 7;
                    return _regeneratorRuntime.awrap(this.isUIClientRunning());

                  case 7:
                    isUIClientRunning = context$3$0.sent;

                    if (!opts.isHeadless) {
                      context$3$0.next = 24;
                      break;
                    }

                    if (!(isServerRunning && !isUIClientRunning)) {
                      context$3$0.next = 13;
                      break;
                    }

                    _logger2['default'].info('Simulator with UDID ' + this.udid + ' already booted in headless mode.');
                    shouldWaitForBoot = false;
                    return context$3$0.abrupt('return');

                  case 13:
                    context$3$0.next = 15;
                    return _regeneratorRuntime.awrap(this.killUIClient());

                  case 15:
                    if (!context$3$0.sent) {
                      context$3$0.next = 19;
                      break;
                    }

                    // Stopping the UI client also kills all running servers. Sad but true
                    _logger2['default'].info('Detected the UI client was running and killed it. Verifying the Simulator is in Shutdown state...');
                    context$3$0.next = 19;
                    return _regeneratorRuntime.awrap(waitForShutdown());

                  case 19:
                    _logger2['default'].info('Booting Simulator with UDID ' + this.udid + ' in headless mode. All UI-related capabilities are going to be ignored.');
                    context$3$0.next = 22;
                    return _regeneratorRuntime.awrap(bootSimulator());

                  case 22:
                    context$3$0.next = 46;
                    break;

                  case 24:
                    if (!(isServerRunning && isUIClientRunning)) {
                      context$3$0.next = 28;
                      break;
                    }

                    _logger2['default'].info('Both Simulator with UDID ' + this.udid + ' and the UI client are currently running');
                    shouldWaitForBoot = false;
                    return context$3$0.abrupt('return');

                  case 28:
                    if (!(['Shutdown', 'Booted'].indexOf(serverState) === -1)) {
                      context$3$0.next = 40;
                      break;
                    }

                    _logger2['default'].info('Simulator ' + this.udid + ' is in \'' + serverState + '\' state. Trying to shutdown...');
                    context$3$0.prev = 30;
                    context$3$0.next = 33;
                    return _regeneratorRuntime.awrap(this.shutdown());

                  case 33:
                    context$3$0.next = 38;
                    break;

                  case 35:
                    context$3$0.prev = 35;
                    context$3$0.t0 = context$3$0['catch'](30);

                    _logger2['default'].warn('Error on Simulator shutdown: ' + context$3$0.t0.message);

                  case 38:
                    context$3$0.next = 40;
                    return _regeneratorRuntime.awrap(waitForShutdown());

                  case 40:
                    _logger2['default'].info('Booting Simulator with UDID ' + this.udid + '...');
                    context$3$0.next = 43;
                    return _regeneratorRuntime.awrap(bootSimulator());

                  case 43:
                    if (isUIClientRunning) {
                      context$3$0.next = 46;
                      break;
                    }

                    context$3$0.next = 46;
                    return _regeneratorRuntime.awrap(this.startUIClient(opts));

                  case 46:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this, [[30, 35]]);
            }));

          case 12:
            if (!shouldWaitForBoot) {
              context$2$0.next = 16;
              break;
            }

            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.waitForBoot(opts.startupTimeout));

          case 15:
            _logger2['default'].info('Simulator with UDID ' + this.udid + ' booted in ' + process.hrtime(startTime)[0] + ' seconds');

          case 16:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Perform verification of device preferences correctness.
     *
     * @param {DevicePreferences} prefs [{}] - The preferences to be verified
     * @throws {Error} If any of the given preference values does not match the expected
     * format.
     */
  }, {
    key: 'verifyDevicePreferences',
    value: function verifyDevicePreferences() {
      var prefs = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      if (_lodash2['default'].isEmpty(prefs)) {
        return;
      }

      if (!_lodash2['default'].isUndefined(prefs.SimulatorWindowLastScale)) {
        if (!_lodash2['default'].isNumber(prefs.SimulatorWindowLastScale) || prefs.SimulatorWindowLastScale <= 0) {
          _logger2['default'].errorAndThrow('SimulatorWindowLastScale is expected to be a positive float value. ' + ('\'' + prefs.SimulatorWindowLastScale + '\' is assigned instead.'));
        }
      }

      if (!_lodash2['default'].isUndefined(prefs.SimulatorWindowCenter)) {
        // https://regex101.com/r/2ZXOij/2
        var verificationPattern = /\{\-?\d+(\.\d+)?,\-?\d+(\.\d+)?\}/;
        if (!_lodash2['default'].isString(prefs.SimulatorWindowCenter) || !verificationPattern.test(prefs.SimulatorWindowCenter)) {
          _logger2['default'].errorAndThrow('SimulatorWindowCenter is expected to match "{floatXPosition,floatYPosition}" format (without spaces). ' + ('\'' + prefs.SimulatorWindowCenter + '\' is assigned instead.'));
        }
      }

      if (!_lodash2['default'].isUndefined(prefs.SimulatorWindowOrientation)) {
        var acceptableValues = ['Portrait', 'LandscapeLeft', 'PortraitUpsideDown', 'LandscapeRight'];
        if (acceptableValues.indexOf(prefs.SimulatorWindowOrientation) === -1) {
          _logger2['default'].errorAndThrow('SimulatorWindowOrientation is expected to be one of ' + acceptableValues + '. ' + ('\'' + prefs.SimulatorWindowOrientation + '\' is assigned instead.'));
        }
      }

      if (!_lodash2['default'].isUndefined(prefs.SimulatorWindowRotationAngle)) {
        if (!_lodash2['default'].isNumber(prefs.SimulatorWindowRotationAngle)) {
          _logger2['default'].errorAndThrow('SimulatorWindowRotationAngle is expected to be a valid number. ' + ('\'' + prefs.SimulatorWindowRotationAngle + '\' is assigned instead.'));
        }
      }
    }

    /**
     * Update the common iOS Simulator preferences file with new values.
     * It is necessary to restart the corresponding Simulator before
     * these changes are applied.
     *
     * @param {DevicePreferences} devicePrefs [{}] - The mapping, which represents new device preference values
     *                                               for the given Simulator.
     * @param {CommonPreferences} commonPrefs [{}] - The mapping, which represents new common preference values
     *                                               for all Simulators.
     * @return {boolean} True if the preferences were successfully updated.
     */
  }, {
    key: 'updatePreferences',
    value: function updatePreferences() {
      var devicePrefs = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var commonPrefs = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var homeFolderPath, plistPath, newPrefs;
      return _regeneratorRuntime.async(function updatePreferences$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!_lodash2['default'].isEmpty(devicePrefs)) {
              _logger2['default'].debug('Setting preferences of ' + this.udid + ' Simulator to ' + JSON.stringify(devicePrefs));
            }
            if (!_lodash2['default'].isEmpty(commonPrefs)) {
              _logger2['default'].debug('Setting common Simulator preferences to ' + JSON.stringify(commonPrefs));
            }
            homeFolderPath = process.env.HOME;

            if (homeFolderPath) {
              context$2$0.next = 6;
              break;
            }

            _logger2['default'].warn('Cannot get the path to HOME folder from the process environment. ' + 'Ignoring Simulator preferences update.');
            return context$2$0.abrupt('return', false);

          case 6:
            this.verifyDevicePreferences(devicePrefs);
            plistPath = _path2['default'].resolve(homeFolderPath, 'Library', 'Preferences', 'com.apple.iphonesimulator.plist');
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(plistPath));

          case 10:
            if (context$2$0.sent) {
              context$2$0.next = 13;
              break;
            }

            _logger2['default'].warn('Simulator preferences file \'' + plistPath + '\' is not accessible. ' + 'Ignoring Simulator preferences update.');
            return context$2$0.abrupt('return', false);

          case 13:
            newPrefs = {};

            if (!_lodash2['default'].isEmpty(devicePrefs)) {
              newPrefs.DevicePreferences = _defineProperty({}, this.udid.toUpperCase(), devicePrefs);
            }
            newPrefs = _lodash2['default'].merge(newPrefs, commonPrefs);
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(preferencesPlistGuard.acquire(SimulatorXcode9.name, function callee$2$0() {
              var currentPlistContent;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.prev = 0;
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap(_appiumSupport.plist.parsePlistFile(plistPath));

                  case 3:
                    currentPlistContent = context$3$0.sent;
                    context$3$0.next = 6;
                    return _regeneratorRuntime.awrap(_appiumSupport.plist.updatePlistFile(plistPath, _lodash2['default'].merge(currentPlistContent, newPrefs), true));

                  case 6:
                    _logger2['default'].debug('Updated ' + this.udid + ' Simulator preferences at \'' + plistPath + '\' with ' + JSON.stringify(newPrefs));
                    return context$3$0.abrupt('return', true);

                  case 10:
                    context$3$0.prev = 10;
                    context$3$0.t0 = context$3$0['catch'](0);

                    _logger2['default'].warn('Cannot update ' + this.udid + ' Simulator preferences at \'' + plistPath + '\'. ' + ('Try to delete the file manually in order to reset it. Original error: ' + context$3$0.t0.message));
                    return context$3$0.abrupt('return', false);

                  case 14:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this3, [[0, 10]]);
            }));

          case 18:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 19:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Shut down the current Simulator.
     * @override
     */
  }, {
    key: 'shutdown',
    value: function shutdown() {
      var _ref2, state;

      return _regeneratorRuntime.async(function shutdown$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.stat());

          case 2:
            _ref2 = context$2$0.sent;
            state = _ref2.state;

            if (!(state === 'Shutdown')) {
              context$2$0.next = 6;
              break;
            }

            return context$2$0.abrupt('return');

          case 6:
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap((0, _nodeSimctl.shutdown)(this.udid));

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Reset the current Simulator to the clean state.
     * @override
     */
  }, {
    key: 'clean',
    value: function clean() {
      return _regeneratorRuntime.async(function clean$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info('Cleaning simulator ' + this.udid);
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _nodeSimctl.eraseDevice)(this.udid, 10000));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Generate Apple script, which selects the necessary Simulator window
     * if multiple windows are opened.
     * @override
     */
  }, {
    key: 'generateWindowActivationScript',
    value: function generateWindowActivationScript() {
      var _ref3, name, sdk;

      return _regeneratorRuntime.async(function generateWindowActivationScript$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.stat());

          case 2:
            _ref3 = context$2$0.sent;
            name = _ref3.name;
            sdk = _ref3.sdk;
            return context$2$0.abrupt('return', '\n      tell application "System Events"\n        tell process "Simulator"\n          set frontmost to false\n          set frontmost to true\n          click (menu item 1 where (its name contains "' + name + ' -" and its name contains "' + sdk + '")) of menu 1 of menu bar item "Window" of menu bar 1\n        end tell\n      end tell\n    ');

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Get the current state of Touch ID Enrollment feature.
     * @override
     */
  }, {
    key: 'isTouchIDEnrolled',
    value: function isTouchIDEnrolled() {
      var output;
      return _regeneratorRuntime.async(function isTouchIDEnrolled$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.executeUIClientScript('\n      tell application "System Events"\n        tell process "Simulator"\n          set dstMenuItem to menu item "Enrolled" of menu 1 of menu item "Touch ID" of menu 1 of menu bar item "Hardware" of menu bar 1\n          set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"\n        end tell\n      end tell\n    '));

          case 2:
            output = context$2$0.sent;

            _logger2['default'].debug('Touch ID enrolled state: ' + output);
            return context$2$0.abrupt('return', _lodash2['default'].isString(output) && output.trim() === 'true');

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Execute a special Apple script, which changes Touch ID feature testing in Simulator UI client.
     * @override
     */
  }, {
    key: 'enrollTouchID',
    value: function enrollTouchID() {
      var isEnabled = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
      return _regeneratorRuntime.async(function enrollTouchID$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.executeUIClientScript('\n      tell application "System Events"\n        tell process "Simulator"\n          set dstMenuItem to menu item "Enrolled" of menu 1 of menu item "Touch ID" of menu 1 of menu bar item "Hardware" of menu bar 1\n          set isChecked to (value of attribute "AXMenuItemMarkChar" of dstMenuItem) is "✓"\n          if ' + (isEnabled ? 'not ' : '') + 'isChecked then\n            click dstMenuItem\n          end if\n        end tell\n      end tell\n    '));

          case 2:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return SimulatorXcode9;
})(_simulatorXcode82['default']);

exports['default'] = SimulatorXcode9;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
