'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _utils = require('./utils');

var openssl = _bluebird2['default'].promisify(require('openssl-wrapper').exec);

var tset = '<?xml version="1.0" encoding="UTF-8"?>\n\n    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n    <plist version="1.0">\n    <array/>\n</plist>';

/**
 * Library for programatically adding certificates
 */

var Certificate = (function () {
  function Certificate(pemFilename) {
    _classCallCheck(this, Certificate);

    this.pemFilename = pemFilename;
  }

  /**
   * Interface for adding and removing records to TrustStore.sqlite3 databases that Keychains use
   */

  /**
   * Add a certificate to the TrustStore
   */

  _createClass(Certificate, [{
    key: 'add',
    value: function add(dir) {
      var data, subject, sha1, trustStore;
      return _regeneratorRuntime.async(function add$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getDerData(this.pemFilename));

          case 2:
            data = context$2$0.sent.toString('hex');
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.getSubject(this.pemFilename));

          case 5:
            subject = context$2$0.sent;
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.getFingerPrint(this.data));

          case 8:
            sha1 = context$2$0.sent.toString('hex');
            trustStore = new TrustStore(dir);
            return context$2$0.abrupt('return', trustStore.addRecord(sha1, tset, subject, data));

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Checks if keychain at given directory has this certificate
     */
  }, {
    key: 'has',
    value: function has(dir) {
      var subject, trustStore;
      return _regeneratorRuntime.async(function has$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getSubject(this.pemFilename));

          case 2:
            subject = context$2$0.sent;
            trustStore = new TrustStore(dir);
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(trustStore.hasRecords(subject));

          case 6:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Remove certificate from the TrustStore
     */
  }, {
    key: 'remove',
    value: function remove(dir) {
      var subject, trustStore;
      return _regeneratorRuntime.async(function remove$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getSubject(this.pemFilename));

          case 2:
            subject = context$2$0.sent;
            trustStore = new TrustStore(dir);
            return context$2$0.abrupt('return', trustStore.removeRecord(subject));

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Translate PEM file to DER buffer
     */
  }, {
    key: 'getDerData',
    value: function getDerData() {
      return _regeneratorRuntime.async(function getDerData$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.data) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return', this.data);

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(openssl('x509', {
              outform: 'der',
              'in': this.pemFilename
            }));

          case 4:
            this.data = context$2$0.sent;
            return context$2$0.abrupt('return', this.data);

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Get SHA1 fingerprint from der data before
     */
  }, {
    key: 'getFingerPrint',
    value: function getFingerPrint() {
      var data, shasum;
      return _regeneratorRuntime.async(function getFingerPrint$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.fingerprint) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return', this.fingerprint);

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.getDerData());

          case 4:
            data = context$2$0.sent;
            shasum = _crypto2['default'].createHash('sha1');

            shasum.update(data);
            this.fingerprint = shasum.digest();
            return context$2$0.abrupt('return', this.fingerprint);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Parse the subject from the der data
     */
  }, {
    key: 'getSubject',
    value: function getSubject() {
      var subject, subRegex;
      return _regeneratorRuntime.async(function getSubject$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.subject) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return', this.subject);

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(openssl('x509', {
              noout: true,
              subject: true,
              'in': this.pemFilename
            }));

          case 4:
            subject = context$2$0.sent;
            subRegex = /^subject[\w\W]*\/CN=([\w\W]*)(\n)?/;

            this.subject = subject.toString().match(subRegex)[1];
            return context$2$0.abrupt('return', this.subject);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return Certificate;
})();

var TrustStore = (function () {
  function TrustStore(sharedResourceDir) {
    _classCallCheck(this, TrustStore);

    this.sharedResourceDir = sharedResourceDir;
  }

  /**
   * Get TrustStore database associated with this simulator
   */

  _createClass(TrustStore, [{
    key: 'getDB',
    value: function getDB() {
      var keychainsPath;
      return _regeneratorRuntime.async(function getDB$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.db) {
              context$2$0.next = 2;
              break;
            }

            return context$2$0.abrupt('return', this.db);

          case 2:
            keychainsPath = _path2['default'].resolve(this.sharedResourceDir, 'Library', 'Keychains');
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(keychainsPath));

          case 5:
            if (context$2$0.sent) {
              context$2$0.next = 8;
              break;
            }

            context$2$0.next = 8;
            return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(keychainsPath));

          case 8:

            // Open sqlite database
            this.db = _path2['default'].resolve(keychainsPath, 'TrustStore.sqlite3');

            // If it doesn't have a tsettings table, create one
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap((0, _utils.execSQLiteQuery)(this.db, 'CREATE TABLE IF NOT EXISTS tsettings (sha1 BLOB NOT NULL DEFAULT \'\', subj BLOB NOT NULL DEFAULT \'\', tset BLOB, data BLOB, PRIMARY KEY(sha1));'));

          case 11:
            context$2$0.prev = 11;
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap((0, _utils.execSQLiteQuery)(this.db, 'CREATE INDEX isubj ON tsettings(subj);'));

          case 14:
            context$2$0.next = 18;
            break;

          case 16:
            context$2$0.prev = 16;
            context$2$0.t0 = context$2$0['catch'](11);

          case 18:
            return context$2$0.abrupt('return', this.db);

          case 19:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[11, 16]]);
    }

    /**
     * Add record to tsettings
     */
  }, {
    key: 'addRecord',
    value: function addRecord(sha1, tset, subj, data) {
      var db;
      return _regeneratorRuntime.async(function addRecord$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getDB());

          case 2:
            db = context$2$0.sent;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.hasRecords(subj));

          case 5:
            if (!context$2$0.sent) {
              context$2$0.next = 11;
              break;
            }

            context$2$0.next = 8;
            return _regeneratorRuntime.awrap((0, _utils.execSQLiteQuery)(db, 'UPDATE tsettings SET sha1=x\'?\', tset=\'?\', data=x\'?\' WHERE subj=\'?\'', sha1, tset, data, subj));

          case 8:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 11:
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap((0, _utils.execSQLiteQuery)(db, 'INSERT INTO tsettings (sha1, subj, tset, data) VALUES (x\'?\', \'?\', \'?\', x\'?\')', sha1, subj, tset, data));

          case 13:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 14:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Remove record from tsettings
     */
  }, {
    key: 'removeRecord',
    value: function removeRecord(subj) {
      return _regeneratorRuntime.async(function removeRecord$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.t0 = _regeneratorRuntime;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.getDB());

          case 3:
            context$2$0.t1 = context$2$0.sent;
            context$2$0.t2 = subj;
            context$2$0.t3 = (0, _utils.execSQLiteQuery)(context$2$0.t1, 'DELETE FROM tsettings WHERE subj = \'?\'', context$2$0.t2);
            context$2$0.next = 8;
            return context$2$0.t0.awrap.call(context$2$0.t0, context$2$0.t3);

          case 8:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Get a record from tsettings
     */
  }, {
    key: 'hasRecords',
    value: function hasRecords(subj) {
      return _regeneratorRuntime.async(function hasRecords$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getRecordCount(subj));

          case 2:
            context$2$0.t0 = context$2$0.sent;
            return context$2$0.abrupt('return', context$2$0.t0 > 0);

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getRecordCount',
    value: function getRecordCount(subj) {
      var result;
      return _regeneratorRuntime.async(function getRecordCount$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.t0 = _regeneratorRuntime;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.getDB());

          case 3:
            context$2$0.t1 = context$2$0.sent;
            context$2$0.t2 = subj;
            context$2$0.t3 = (0, _utils.execSQLiteQuery)(context$2$0.t1, 'SELECT count(*) FROM tsettings WHERE subj = \'?\'', context$2$0.t2);
            context$2$0.next = 8;
            return context$2$0.t0.awrap.call(context$2$0.t0, context$2$0.t3);

          case 8:
            result = context$2$0.sent.stdout;
            return context$2$0.abrupt('return', parseInt(result.split('=')[1], 10));

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return TrustStore;
})();

exports['default'] = Certificate;
exports.Certificate = Certificate;
exports.TrustStore = TrustStore;

// Convert 'pem' file to 'der'

// Convert 'pem' file to 'der'

// If the sim doesn't have a keychains directory, create one
//# sourceMappingURL=data:application/json;charset=utf8;base64,
