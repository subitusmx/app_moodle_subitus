'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _simulatorXcode6 = require('./simulator-xcode-6');

var _simulatorXcode7 = require('./simulator-xcode-7');

var _simulatorXcode72 = _interopRequireDefault(_simulatorXcode7);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _asyncbox = require('asyncbox');

var _teen_process = require('teen_process');

var _nodeSimctl = require('node-simctl');

// these sims are sloooooooow
var STARTUP_TIMEOUT = 120 * 1000;
var SAFARI_STARTUP_TIMEOUT = 25 * 1000;
var SPRINGBOARD_BUNDLE_ID = 'com.apple.springboard';
var MOBILE_SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';
var UI_CLIENT_BUNDLE_ID = 'com.apple.iphonesimulator';
var PROCESS_LAUNCH_OK_PATTERN = function PROCESS_LAUNCH_OK_PATTERN(bundleId) {
  return new RegExp(bundleId.replace('.', '\\.') + ':\\s+\\d+');
};

var SimulatorXcode8 = (function (_SimulatorXcode7) {
  _inherits(SimulatorXcode8, _SimulatorXcode7);

  function SimulatorXcode8(udid, xcodeVersion) {
    _classCallCheck(this, SimulatorXcode8);

    _get(Object.getPrototypeOf(SimulatorXcode8.prototype), 'constructor', this).call(this, udid, xcodeVersion);

    // list of files to check for when seeing if a simulator is "fresh"
    // (meaning it has never been booted).
    // If these files are present, we assume it's been successfully booted
    this.isFreshFiles = ['Library/Cookies', 'Library/Preferences/.GlobalPreferences.plist', 'Library/Preferences/com.apple.springboard.plist', 'var/run/syslog.pid'];
  }

  /**
   * @return {string} Bundle identifier of Simulator UI client.
   */

  _createClass(SimulatorXcode8, [{
    key: 'isUIClientRunning',

    /**
     * Check the state of Simulator UI client.
     * @Override
     *
     * @return {boolean} True of if UI client is running or false otherwise.
     */
    value: function isUIClientRunning() {
      var args, _ref, stdout, count;

      return _regeneratorRuntime.async(function isUIClientRunning$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            args = ['-e', 'tell application "System Events" to count processes whose bundle identifier is "' + this.uiClientBundleId + '"'];
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('osascript', args));

          case 3:
            _ref = context$2$0.sent;
            stdout = _ref.stdout;
            count = parseInt(stdout.trim(), 10);

            if (isNaN(count)) {
              _logger2['default'].errorAndThrow('Cannot parse the count of running Simulator UI client instances from \'osascript ' + args + '\' output: ' + stdout);
            }
            _logger2['default'].debug('The count of running Simulator UI client instances is ' + count);
            return context$2$0.abrupt('return', count >= 1);

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Kill the UI client if it is running.
     *
     * @param {boolean} force - Set it to true to send SIGKILL signal to Simulator process.
     *                          SIGTERM will be sent by default.
     * @return {boolean} True if the UI client was successfully killed or false
     *                   if it is not running.
     */
  }, {
    key: 'killUIClient',
    value: function killUIClient() {
      var force = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      var osascriptArgs, _ref2, stdout, killArgs;

      return _regeneratorRuntime.async(function killUIClient$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            osascriptArgs = ['-e', 'tell application "System Events" to unix id of processes whose bundle identifier is "' + this.uiClientBundleId + '"'];
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('osascript', osascriptArgs));

          case 3:
            _ref2 = context$2$0.sent;
            stdout = _ref2.stdout;

            if (stdout.trim().length) {
              context$2$0.next = 7;
              break;
            }

            return context$2$0.abrupt('return', false);

          case 7:
            killArgs = force ? ['-9', stdout.trim()] : [stdout.trim()];
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)('kill', killArgs));

          case 10:
            return context$2$0.abrupt('return', true);

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Verify whether the particular application is installed on Simulator.
     * @override
     *
     * @param {string} bundleId - The bundle id of the application to be checked.
     * @return {boolean} True if the given application is installed.
     */
  }, {
    key: 'isAppInstalled',
    value: function isAppInstalled(bundleId) {
      var appContainer, info;
      return _regeneratorRuntime.async(function isAppInstalled$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _nodeSimctl.getAppContainer)(this.udid, bundleId, false));

          case 3:
            appContainer = context$2$0.sent;
            return context$2$0.abrupt('return', appContainer.endsWith('.app'));

          case 7:
            context$2$0.prev = 7;
            context$2$0.t0 = context$2$0['catch'](0);
            context$2$0.prev = 9;
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap((0, _nodeSimctl.appInfo)(this.udid, bundleId));

          case 12:
            info = context$2$0.sent;
            return context$2$0.abrupt('return', info.indexOf('ApplicationType') !== -1);

          case 16:
            context$2$0.prev = 16;
            context$2$0.t1 = context$2$0['catch'](9);
            return context$2$0.abrupt('return', false);

          case 19:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 7], [9, 16]]);
    }

    /**
     * @return {string} Application bundle id, which signals that Simulator booting is
     * competed if it is running.
     */
  }, {
    key: 'waitForBoot',

    /**
     * Verify whether the Simulator booting is completed and/or wait for it
     * until the timeout expires.
     * @override
     *
     * @param {number} startupTimeout - the number of milliseconds to wait until booting is completed.
     * @emits BOOT_COMPLETED_EVENT if the current Simulator is ready to accept simctl commands, like 'install'.
     */
    value: function waitForBoot(startupTimeout) {
      var startupTimestamp, lastError;
      return _regeneratorRuntime.async(function waitForBoot$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            startupTimestamp = process.hrtime();
            lastError = null;
            context$2$0.prev = 2;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((function callee$2$0() {
              var isOnBootCompletedEmitted;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    isOnBootCompletedEmitted = false;
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$3$0() {
                      var _ref3,
                      // 'springboard' process should be the last one to start after boot
                      // 'simctl launch' will block until this process is running or fail if booting is still in progress
                      stdout;

                      return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                        while (1) switch (context$4$0.prev = context$4$0.next) {
                          case 0:
                            context$4$0.prev = 0;
                            context$4$0.next = 3;
                            return _regeneratorRuntime.awrap((0, _teen_process.exec)('xcrun', ['simctl', 'launch', this.udid, this.startupPollBundleId]));

                          case 3:
                            _ref3 = context$4$0.sent;
                            stdout = _ref3.stdout;

                            if (!PROCESS_LAUNCH_OK_PATTERN(this.startupPollBundleId).test(stdout)) {
                              context$4$0.next = 8;
                              break;
                            }

                            if (!isOnBootCompletedEmitted) {
                              isOnBootCompletedEmitted = true;
                              this.emit(_simulatorXcode6.BOOT_COMPLETED_EVENT);
                            }

                            return context$4$0.abrupt('return', true);

                          case 8:
                            context$4$0.next = 13;
                            break;

                          case 10:
                            context$4$0.prev = 10;
                            context$4$0.t0 = context$4$0['catch'](0);

                            lastError = context$4$0.t0.stderr || context$4$0.t0.message;

                          case 13:
                            return context$4$0.abrupt('return', false);

                          case 14:
                          case 'end':
                            return context$4$0.stop();
                        }
                      }, null, _this, [[0, 10]]);
                    }, { waitMs: startupTimeout, intervalMs: 1500 }));

                  case 3:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2);
            })());

          case 5:
            context$2$0.next = 10;
            break;

          case 7:
            context$2$0.prev = 7;
            context$2$0.t0 = context$2$0['catch'](2);

            _logger2['default'].errorAndThrow('Simulator is not booted after ' + process.hrtime(startupTimestamp)[0] + ' seconds ' + ('because of: ' + (lastError || 'an unknown error')));

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[2, 7]]);
    }

    /**
     * Open the given URL in mobile Safari browser.
     * The browser will be started automatically if it is not running.
     * @override
     *
     * @param {string} url - The URL to be opened.
     */
  }, {
    key: 'openUrl',
    value: function openUrl(url) {
      var launchTimestamp, lastError;
      return _regeneratorRuntime.async(function openUrl$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.isRunning());

          case 2:
            if (context$2$0.sent) {
              context$2$0.next = 4;
              break;
            }

            throw new Error('Tried to open ' + url + ', but Simulator is not in Booted state');

          case 4:
            launchTimestamp = process.hrtime();
            lastError = null;
            context$2$0.prev = 6;
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$2$0() {
              var _ref4,
              // This is to make sure Safari is already running
              stdout;

              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.prev = 0;
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap((0, _teen_process.exec)('xcrun', ['simctl', 'launch', this.udid, MOBILE_SAFARI_BUNDLE_ID]));

                  case 3:
                    _ref4 = context$3$0.sent;
                    stdout = _ref4.stdout;

                    if (!PROCESS_LAUNCH_OK_PATTERN(MOBILE_SAFARI_BUNDLE_ID).test(stdout)) {
                      context$3$0.next = 9;
                      break;
                    }

                    context$3$0.next = 8;
                    return _regeneratorRuntime.awrap((0, _nodeSimctl.openUrl)(this.udid, url));

                  case 8:
                    return context$3$0.abrupt('return', true);

                  case 9:
                    context$3$0.next = 15;
                    break;

                  case 11:
                    context$3$0.prev = 11;
                    context$3$0.t0 = context$3$0['catch'](0);

                    _logger2['default'].error('Failed to open \'' + url + '\' in Safari. Retrying...');
                    lastError = context$3$0.t0.stderr || context$3$0.t0.message;

                  case 15:
                    return context$3$0.abrupt('return', false);

                  case 16:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this3, [[0, 11]]);
            }, { waitMs: SAFARI_STARTUP_TIMEOUT, intervalMs: 500 }));

          case 9:
            context$2$0.next = 14;
            break;

          case 11:
            context$2$0.prev = 11;
            context$2$0.t0 = context$2$0['catch'](6);

            _logger2['default'].errorAndThrow('Safari cannot open \'' + url + '\' after ' + process.hrtime(launchTimestamp)[0] + ' seconds ' + ('because of: ' + (lastError || 'an unknown error')));

          case 14:
            _logger2['default'].debug('Safari has successfully opened \'' + url + '\' in ' + process.hrtime(launchTimestamp)[0] + ' seconds');

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[6, 11]]);
    }

    /**
     * Clean up the directories for mobile Safari.
     * @override
     *
     * @param {boolean} keepPrefs - Whether to keep Safari preferences from being deleted.
     */
  }, {
    key: 'cleanSafari',
    value: function cleanSafari() {
      var keepPrefs = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
      return _regeneratorRuntime.async(function cleanSafari$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _nodeSimctl.terminate)(this.udid, MOBILE_SAFARI_BUNDLE_ID));

          case 3:
            context$2$0.next = 7;
            break;

          case 5:
            context$2$0.prev = 5;
            context$2$0.t0 = context$2$0['catch'](0);

          case 7:
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(SimulatorXcode8.prototype), 'cleanSafari', this).call(this, keepPrefs));

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 5]]);
    }

    /**
     * Clean/scrub the particular application on Simulator.
     * @override
     *
     * @param {string} appFile - Application name minus ".app".
     * @param {string} appBundleId - Bundle identifier of the application.
     * @param {boolean} scrub - If `scrub` is false, we want to clean by deleting the app and all
     *   files associated with it. If `scrub` is true, we just want to delete the preferences and
     *   changed files.
     */
  }, {
    key: 'cleanCustomApp',
    value: function cleanCustomApp(appFile, appBundleId) {
      var scrub = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
      return _regeneratorRuntime.async(function cleanCustomApp$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _nodeSimctl.terminate)(this.udid, appBundleId));

          case 3:
            context$2$0.next = 7;
            break;

          case 5:
            context$2$0.prev = 5;
            context$2$0.t0 = context$2$0['catch'](0);

          case 7:
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(SimulatorXcode8.prototype), 'cleanCustomApp', this).call(this, appFile, appBundleId, scrub));

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 5]]);
    }

    /**
     * Perform Shake gesture on Simulator window via AppleScript.
     */
  }, {
    key: 'shake',
    value: function shake() {
      return _regeneratorRuntime.async(function shake$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.executeUIClientScript('\n      tell application "System Events"\n        tell process "Simulator"\n          keystroke "z" using {control down, command down}\n        end tell\n      end tell\n    '));

          case 2:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /**
     * Set custom geolocation parameters for the given Simulator using AppleScript.
     *
     * @param {string} latitude - The latitude value, which is going to be entered
     *   into the corresponding edit field, for example '39,0006'.
     * @param {string} longitude - The longitude value, which is going to be entered
     *   into the corresponding edit field, for example '19,0068'.
     * @returns {boolean} True if the given parameters have correct format and were successfully accepted.
     */
  }, {
    key: 'setGeolocation',
    value: function setGeolocation(latitude, longitude) {
      var output;
      return _regeneratorRuntime.async(function setGeolocation$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.executeUIClientScript('\n      tell application "System Events"\n        tell process "Simulator"\n          set featureName to "Custom Location"\n          set dstMenuItem to menu item (featureName & "…") of menu 1 of menu item "Location" of menu 1 of menu bar item "Debug" of menu bar 1\n          click dstMenuItem\n          delay 1\n          set value of text field 1 of window featureName to "' + latitude + '"\n          delay 0.5\n          set value of text field 2 of window featureName to "' + longitude + '"\n          delay 0.5\n          click button "OK" of window featureName\n          delay 0.5\n          set isInvisible to (not (exists (window featureName)))\n        end tell\n      end tell\n    '));

          case 2:
            output = context$2$0.sent;

            _logger2['default'].debug('Geolocation parameters dialog accepted: ' + output);
            return context$2$0.abrupt('return', _lodash2['default'].isString(output) && output.trim() === 'true');

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'uiClientBundleId',
    get: function get() {
      return UI_CLIENT_BUNDLE_ID;
    }
  }, {
    key: 'startupPollBundleId',
    get: function get() {
      return SPRINGBOARD_BUNDLE_ID;
    }

    /**
     * @return {number} The max number of milliseconds to wait until Simulator booting is completed.
     */
  }, {
    key: 'startupTimeout',
    get: function get() {
      return STARTUP_TIMEOUT;
    }
  }]);

  return SimulatorXcode8;
})(_simulatorXcode72['default']);

exports['default'] = SimulatorXcode8;
module.exports = exports['default'];

// get_app_container subcommand fails for system applications,
// so we try the hidden appinfo subcommand, which prints correct info for
// system/hidden apps

// ignore error

// ignore error
//# sourceMappingURL=data:application/json;charset=utf8;base64,
