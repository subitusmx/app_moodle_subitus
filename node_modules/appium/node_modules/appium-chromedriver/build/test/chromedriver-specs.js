require('source-map-support').install();

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _libChromedriver = require('../lib/chromedriver');

var _libChromedriver2 = _interopRequireDefault(_libChromedriver);

var _libInstall = require('../lib/install');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _teen_process = require('teen_process');

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function nextState(cd) {
  return new _bluebird2['default'](function (resolve) {
    cd.on(_libChromedriver2['default'].EVENT_CHANGED, function (msg) {
      resolve(msg.state);
    });
  });
}

function nextError(cd) {
  return new _bluebird2['default'](function (resolve) {
    cd.on(_libChromedriver2['default'].EVENT_ERROR, function (err) {
      // eslint-disable-line promise/prefer-await-to-callbacks
      resolve(err);
    });
  });
}

function assertNoRunningChromedrivers() {
  var _ref, stdout, count, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line;

  return _regeneratorRuntime.async(function assertNoRunningChromedrivers$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('ps', ['aux']));

      case 2:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;
        count = 0;
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 8;

        for (_iterator = _getIterator(stdout.split('\n')); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          line = _step.value;

          if (line.indexOf(/chromedriver/i) !== -1) {
            count++;
          }
        }

        context$1$0.next = 16;
        break;

      case 12:
        context$1$0.prev = 12;
        context$1$0.t0 = context$1$0['catch'](8);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 16:
        context$1$0.prev = 16;
        context$1$0.prev = 17;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 19:
        context$1$0.prev = 19;

        if (!_didIteratorError) {
          context$1$0.next = 22;
          break;
        }

        throw _iteratorError;

      case 22:
        return context$1$0.finish(19);

      case 23:
        return context$1$0.finish(16);

      case 24:
        count.should.eql(0);

      case 25:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[8, 12, 16, 24], [17,, 19, 23]]);
}

function buildReqRes(url, method, body) {
  var req = { originalUrl: url, method: method, body: body };
  var res = {};
  res.headers = {};
  res.set = function (k, v) {
    res[k] = v;
  };
  res.status = function (code) {
    res.sentCode = code;
    return {
      send: function send(body) {
        try {
          body = JSON.parse(body);
        } catch (e) {}
        res.sentBody = body;
      }
    };
  };
  return [req, res];
}

describe('chromedriver binary setup', function () {
  var _this = this;

  this.timeout(20000);
  before(function callee$1$0() {
    var cd;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd = new _libChromedriver2['default']({});
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(cd.initChromedriverPath());

        case 4:
          context$2$0.next = 11;
          break;

        case 6:
          context$2$0.prev = 6;
          context$2$0.t0 = context$2$0['catch'](1);

          if (!(context$2$0.t0.message.indexOf("Trying to use") !== -1)) {
            context$2$0.next = 11;
            break;
          }

          context$2$0.next = 11;
          return _regeneratorRuntime.awrap((0, _libInstall.install)());

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[1, 6]]);
  });

  it('should start with a binary that exists', function callee$1$0() {
    var cd;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd = new _libChromedriver2['default']();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(cd.initChromedriverPath());

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

describe('chromedriver with EventEmitter', function () {
  var _this2 = this;

  this.timeout(120000);
  var cd = null;
  var caps = { browserName: 'chrome' };
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd = new _libChromedriver2['default']({});

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  it('should start a session', function callee$1$0() {
    var nextStatePromise;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd.state.should.eql('stopped');
          nextStatePromise = nextState(cd);

          cd.start(caps);
          cd.capabilities.should.eql(caps);
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(nextStatePromise.should.become(_libChromedriver2['default'].STATE_STARTING));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(nextState(cd).should.become(_libChromedriver2['default'].STATE_ONLINE));

        case 8:
          should.exist(cd.jwproxy.sessionId);
          should.exist(cd.sessionId());

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  it('should run some commands', function callee$1$0() {
    var res;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(cd.sendCommand('/url', 'POST', { url: 'http://google.com' }));

        case 2:
          res = context$2$0.sent;

          should.not.exist(res);
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(cd.sendCommand('/url', 'GET'));

        case 6:
          res = context$2$0.sent;

          res.should.contain('google');

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  it('should proxy commands', function callee$1$0() {
    var initSessId, _buildReqRes, _buildReqRes2, req, res;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          initSessId = cd.sessionId();
          _buildReqRes = buildReqRes('/url', 'GET');
          _buildReqRes2 = _slicedToArray(_buildReqRes, 2);
          req = _buildReqRes2[0];
          res = _buildReqRes2[1];
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(cd.proxyReq(req, res));

        case 7:
          res.headers['content-type'].should.contain('application/json');
          res.sentCode.should.equal(200);
          res.sentBody.status.should.equal(0);
          res.sentBody.value.should.contain('google');
          res.sentBody.sessionId.should.equal(initSessId);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  it('should say whether there is a working webview', function callee$1$0() {
    var res;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(cd.hasWorkingWebview());

        case 2:
          res = context$2$0.sent;

          res.should.equal(true);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  it('should restart a session', function callee$1$0() {
    var p1, restartPromise;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          p1 = nextState(cd);
          restartPromise = cd.restart();
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(p1.should.become(_libChromedriver2['default'].STATE_RESTARTING));

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(nextState(cd).should.become(_libChromedriver2['default'].STATE_ONLINE));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(restartPromise);

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  it('should stop a session', function callee$1$0() {
    var nextStatePromise;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          nextStatePromise = nextState(cd);

          cd.stop();
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(nextStatePromise.should.become(_libChromedriver2['default'].STATE_STOPPING));

        case 4:
          should.not.exist(cd.sessionId());
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(nextState(cd).should.become(_libChromedriver2['default'].STATE_STOPPED));

        case 7:
          should.not.exist(cd.sessionId());
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(assertNoRunningChromedrivers());

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  it.skip('should change state to stopped if chromedriver crashes', function callee$1$0() {
    var nextStatePromise;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          // test works but is skipped because it leaves a chrome window orphaned
          // and I can't figure out a way to safely kill only that one
          cd.state.should.eql(_libChromedriver2['default'].STATE_STOPPED);
          nextStatePromise = nextState(cd);

          cd.start(caps);
          cd.capabilities.should.eql(caps);
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(nextStatePromise.should.become(_libChromedriver2['default'].STATE_STARTING));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(nextState(cd).should.become(_libChromedriver2['default'].STATE_ONLINE));

        case 8:
          should.exist(cd.jwproxy.sessionId);
          should.exist(cd.sessionId());
          nextStatePromise = nextState(cd);
          context$2$0.next = 13;
          return _regeneratorRuntime.awrap(cd.killAll());

        case 13:
          context$2$0.next = 15;
          return _regeneratorRuntime.awrap(nextStatePromise.should.become(_libChromedriver2['default'].STATE_STOPPED));

        case 15:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  it('should throw an error when chromedriver doesnt exist', function callee$1$0() {
    var cd2, nextErrP, err;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd2 = new _libChromedriver2['default']({
            executable: '/does/not/exist'
          });
          nextErrP = nextError(cd2);
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(cd2.start({}).should.eventually.be.rejectedWith(/Trying to use/));

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(nextErrP);

        case 6:
          err = context$2$0.sent;

          err.message.should.contain('Trying to use');

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
});

describe('chromedriver with async/await', function () {
  var _this3 = this;

  this.timeout(120000);
  var cd = null;
  var caps = { browserName: 'chrome' };
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd = new _libChromedriver2['default']({});

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this3);
  });
  it('should start a session', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd.state.should.eql('stopped');
          should.not.exist(cd.sessionId());
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(cd.start(caps));

        case 4:
          cd.capabilities.should.eql(caps);
          cd.state.should.eql(_libChromedriver2['default'].STATE_ONLINE);
          should.exist(cd.jwproxy.sessionId);
          should.exist(cd.sessionId());

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this3);
  });
  it('should restart a session', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd.state.should.eql(_libChromedriver2['default'].STATE_ONLINE);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(cd.restart());

        case 3:
          cd.state.should.eql(_libChromedriver2['default'].STATE_ONLINE);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this3);
  });
  it('should stop a session', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd.state.should.eql(_libChromedriver2['default'].STATE_ONLINE);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(cd.stop());

        case 3:
          cd.state.should.eql(_libChromedriver2['default'].STATE_STOPPED);
          should.not.exist(cd.sessionId());
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(assertNoRunningChromedrivers());

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this3);
  });
  it('should throw an error during start if spawn does not work', function callee$1$0() {
    var badCd;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          badCd = new _libChromedriver2['default']({
            port: 1
          });
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(badCd.start(caps).should.eventually.be.rejectedWith('ChromeDriver crashed during startup'));

        case 3:
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(assertNoRunningChromedrivers());

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this3);
  });
  it('should throw an error during start if session does not work', function callee$1$0() {
    var badCd;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          badCd = new _libChromedriver2['default']({});
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(badCd.start({ chromeOptions: { badCap: 'foo' } }).should.eventually.be.rejectedWith('cannot parse capability'));

        case 3:
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(assertNoRunningChromedrivers());

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this3);
  });
});

// we miss the opportunity to listen for the 'starting' state
//# sourceMappingURL=data:application/json;charset=utf8;base64,
