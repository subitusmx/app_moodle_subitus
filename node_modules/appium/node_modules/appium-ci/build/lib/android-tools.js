'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _this = this;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _stream = require('stream');

var _stream2 = _interopRequireDefault(_stream);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _split = require('split');

var _split2 = _interopRequireDefault(_split);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var log = {
  emu: _appiumSupport.logger.getLogger('android-emu')
};

var DEFAULT_OPTS = {
  initWait: 15000,
  maxWait: 300000,
  pool: 5000
};

var androidTools = {
  killAll: function killAll(processes) {
    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, p, cmd;

    return _regeneratorRuntime.async(function killAll$(context$1$0) {
      while (1) switch (context$1$0.prev = context$1$0.next) {
        case 0:
          processes = processes || ['emulator'];
          processes = _lodash2['default'].flatten([processes]);
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          context$1$0.prev = 5;
          _iterator = _getIterator(processes);

        case 7:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            context$1$0.next = 16;
            break;
          }

          p = _step.value;
          cmd = process.platform.match(/^win/) ? 'powershell -Command "Stop-Process -Name *' + p + '*"' : 'sudo pkill -f ' + p;

          console.log('killing process with command:' + cmd);
          context$1$0.next = 13;
          return _regeneratorRuntime.awrap(_utils2['default'].exec(cmd)['catch'](function () {}));

        case 13:
          _iteratorNormalCompletion = true;
          context$1$0.next = 7;
          break;

        case 16:
          context$1$0.next = 22;
          break;

        case 18:
          context$1$0.prev = 18;
          context$1$0.t0 = context$1$0['catch'](5);
          _didIteratorError = true;
          _iteratorError = context$1$0.t0;

        case 22:
          context$1$0.prev = 22;
          context$1$0.prev = 23;

          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }

        case 25:
          context$1$0.prev = 25;

          if (!_didIteratorError) {
            context$1$0.next = 28;
            break;
          }

          throw _iteratorError;

        case 28:
          return context$1$0.finish(25);

        case 29:
          return context$1$0.finish(22);

        case 30:
        case 'end':
          return context$1$0.stop();
      }
    }, null, _this, [[5, 18, 22, 30], [23,, 25, 29]]);
  }
};

exports.androidTools = androidTools;

var Emulator = (function () {
  function Emulator(avd) {
    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, Emulator);

    this.opts = _lodash2['default'].clone(opts);
    _lodash2['default'].defaults(this.opts, DEFAULT_OPTS);
    this.avd = avd;
  }

  _createClass(Emulator, [{
    key: 'start',
    value: function start() {
      var out = new _stream2['default'].PassThrough();
      out.pipe((0, _split2['default'])()).on('data', function (line) {
        log.emu.info(line);
      });
      out.pipe(_fs2['default'].createWriteStream('emulator.log'));
      var emuBin = _os2['default'].platform() === 'linux' ? 'emulator64-x86' : 'emulator';
      var emuArgs = ['-avd', this.avd, '-no-snapshot-load', '-no-snapshot-save', '-no-audio', '-netfast'];
      if (_os2['default'].platform() === 'linux') {
        emuArgs = emuArgs.concat(['-qemu', '-m', '512', '-enable-kvm']);
      }
      log.emu.info('executing', emuBin, emuArgs.join(' '));
      this.child = _utils2['default'].spawn(emuBin, emuArgs);
      this.child.stdout.pipe(out);
      this.child.stderr.pipe(out);
    }
  }, {
    key: 'waitTillReady',
    value: function waitTillReady() {
      var startMs, timeoutPromise, emuStarted, emuErrored, procPromise, _waitForEmu;

      return _regeneratorRuntime.async(function waitTillReady$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            startMs = Date.now();
            timeoutPromise = undefined, emuStarted = undefined, emuErrored = undefined;
            procPromise = new _bluebird2['default'].Promise(function (resolve, reject) {
              _this2.child.on('error', function (err) {
                emuErrored = true;
                reject('Emulator didn\'t start properly, error:', err);
              });
              _this2.child.on('close', function () {
                if (!emuStarted) {
                  emuErrored = true;
                  reject('Emulator closed too early, see emu logs for errors.');
                }
              });
            }).cancellable()['catch'](_bluebird2['default'].Promise.CancellationError, function () {});

            _waitForEmu = function _waitForEmu(waitMs) {
              var stdout, _ref, _ref2;

              return _regeneratorRuntime.async(function _waitForEmu$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    waitMs = waitMs || this.opts.pool;

                    // wait

                    if (!(waitMs > 0)) {
                      context$3$0.next = 6;
                      break;
                    }

                    log.emu.info('Waiting ' + waitMs + ' ms for emu...');
                    timeoutPromise = new _bluebird2['default'].Promise(function () {}).timeout(waitMs); // cancellable
                    context$3$0.next = 6;
                    return _regeneratorRuntime.awrap(timeoutPromise.then(_waitForEmu)['catch'](_bluebird2['default'].Promise.TimeoutError, function () {})['catch'](_bluebird2['default'].Promise.CancellationError, function () {}));

                  case 6:
                    if (!emuErrored) {
                      context$3$0.next = 8;
                      break;
                    }

                    throw new Error('emulator errored');

                  case 8:
                    if (!(Date.now() - startMs > this.opts.maxWait)) {
                      context$3$0.next = 10;
                      break;
                    }

                    throw new Error('Emulator did not show up');

                  case 10:
                    stdout = undefined;
                    context$3$0.prev = 11;
                    context$3$0.next = 14;
                    return _regeneratorRuntime.awrap(_utils2['default'].exec('adb shell getprop sys.boot_completed'));

                  case 14:
                    _ref = context$3$0.sent;
                    _ref2 = _slicedToArray(_ref, 1);
                    stdout = _ref2[0];
                    context$3$0.next = 31;
                    break;

                  case 19:
                    context$3$0.prev = 19;
                    context$3$0.t0 = context$3$0['catch'](11);

                    if (!context$3$0.t0.toString().match(/device not found/)) {
                      context$3$0.next = 26;
                      break;
                    }

                    // there might be something wrong with the adb server
                    log.emu.warn('Device not found, it should be there, killing adb server.');
                    return context$3$0.abrupt('return', _utils2['default'].exec('adb kill-server').then(function () {
                      return _waitForEmu();
                    }));

                  case 26:
                    if (!context$3$0.t0.toString().match(/device offline/)) {
                      context$3$0.next = 30;
                      break;
                    }

                    return context$3$0.abrupt('return', _waitForEmu());

                  case 30:
                    throw context$3$0.t0;

                  case 31:
                    if (!(stdout && stdout.trim() === '1')) {
                      context$3$0.next = 36;
                      break;
                    }

                    log.emu.info('emulator started');
                    emuStarted = true;
                    context$3$0.next = 38;
                    break;

                  case 36:
                    context$3$0.next = 38;
                    return _regeneratorRuntime.awrap(_waitForEmu());

                  case 38:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2, [[11, 19]]);
            };

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_bluebird2['default'].race([_waitForEmu(this.opts.initWait), procPromise])['finally'](function () {
              // cancel outstanding promises so that they do not hang the node process
              timeoutPromise.cancel();
              procPromise.cancel();
            }));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stop',
    value: function stop() {
      if (this.child) {
        this.child.kill();
      }
    }
  }]);

  return Emulator;
})();

exports.Emulator = Emulator;

// one cancellable promise monitor the proc events for abnormal termination

// recursion end conditions

// retrieve emulator status

// that's ok,just wait

// check emulator status

// wait for first promise
//# sourceMappingURL=data:application/json;charset=utf8;base64,
