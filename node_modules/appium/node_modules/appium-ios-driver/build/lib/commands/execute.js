'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _appiumSupport = require('appium-support');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _appiumIosSimulator = require('appium-ios-simulator');

var _server = require('../server');

var commands = {},
    helpers = {},
    extensions = {};

commands.execute = function callee$0$0(script, args) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!script.match(/^mobile\:/)) {
          context$1$0.next = 7;
          break;
        }

        script = script.replace(/^mobile\:/, '').trim();
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.executeMobile(script, _lodash2['default'].isArray(args) ? args[0] : args));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
        if (!this.isWebContext()) {
          context$1$0.next = 14;
          break;
        }

        args = this.convertElementsForAtoms(args);
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.executeAtom('execute_script', [script, args]));

      case 11:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(script));

      case 16:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.executeAsync = function callee$0$0(script, args, sessionId) {
  var address, port, protocol, currentUrl, responseUrl, defaultHost, urlObject;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(script));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
        address = this.opts.callbackAddress || this.opts.address;
        port = this.opts.callbackPort || this.opts.port;

        sessionId = sessionId || this.sessionId;

        // https sites need to reply to an https endpoint, in Safari
        protocol = 'http:';
        context$1$0.prev = 8;
        context$1$0.t0 = _url2['default'];
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.getUrl());

      case 12:
        context$1$0.t1 = context$1$0.sent;
        currentUrl = context$1$0.t0.parse.call(context$1$0.t0, context$1$0.t1);

        if (currentUrl.protocol === 'https:' && this.opts.httpsCallbackPort && this.opts.httpsCallbackAddress) {
          protocol = currentUrl.protocol;
          port = this.opts.httpsCallbackPort;
          address = this.opts.httpsCallbackAddress;
        }
        context$1$0.next = 19;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t2 = context$1$0['catch'](8);

      case 19:
        responseUrl = protocol + '//' + address + ':' + port + '/wd/hub/session/' + sessionId + '/receive_async_response';

        if (this.isRealDevice()) {
          defaultHost = this.opts.address;
          urlObject = _url2['default'].parse(responseUrl);

          if (urlObject.hostname === defaultHost) {
            _logger2['default'].debug('Real device safari test and no custom callback address ' + 'set, changing callback address to local ip.');
            urlObject.hostname = _appiumSupport.util.localIp();
            urlObject.host = null; // set to null, otherwise hostname is ignored
            responseUrl = _url2['default'].format(urlObject);
          } else {
            _logger2['default'].debug('Custom callback address set, leaving as is.');
          }
        }

        _logger2['default'].debug('Response url for executeAsync: ' + responseUrl);
        args = this.convertElementsForAtoms(args);
        this.asyncWaitMs = this.asyncWaitMs || 0;
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(this.executeAtomAsync('execute_async_script', [script, args, this.asyncWaitMs], responseUrl));

      case 26:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 27:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[8, 17]]);
};

commands.receiveAsyncResponse = function callee$0$0(status, value) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Received async response: ' + JSON.stringify(value));
        if (!_lodash2['default'].isNull(this.asyncPromise) && !_lodash2['default'].isUndefined(this.asyncPromise)) {
          if (status !== 0) {
            this.asyncPromise.reject((0, _appiumBaseDriver.errorFromCode)(status, value.message));
          } else {
            this.asyncPromise.resolve(value);
          }
        } else {
          _logger2['default'].warn('Received async response when we were not expecting one! ' + ('Response was: ' + JSON.stringify(value)));
        }

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.startHttpsAsyncServer = function callee$0$0() {
  var address, port, _ref, sslServer, pemCertificate, httpsPort, udid;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Starting https server for async responses');
        address = this.opts.callbackAddress || this.opts.address;
        port = this.opts.callbackPort || this.opts.port;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap((0, _server.startHttpsServer)(port, address));

      case 5:
        _ref = context$1$0.sent;
        sslServer = _ref.sslServer;
        pemCertificate = _ref.pemCertificate;
        httpsPort = _ref.httpsPort;

        this.opts.sslServer = sslServer;
        this.opts.httpsServerCertificate = pemCertificate;
        this.opts.httpsCallbackPort = httpsPort;
        this.opts.httpsCallbackAddress = 'localhost';
        udid = undefined;

        if (this.sim) {
          // ios driver
          udid = this.sim.udid;
        } else {
          // xcuitest driver
          udid = this.opts.udid;
        }
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap((0, _appiumIosSimulator.installSSLCert)(this.opts.httpsServerCertificate, udid));

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.stopHttpsAsyncServer = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Stopping https server for async responses');

        if (!this.opts.sslServer) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.opts.sslServer.close());

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap((0, _appiumIosSimulator.uninstallSSLCert)(this.opts.httpsServerCertificate, this.opts.udid));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.executeMobile = function callee$0$0(mobileCommand) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(mobileCommand === 'scroll')) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.mobileScroll(opts));

      case 3:
        context$1$0.next = 6;
        break;

      case 5:
        throw new _appiumBaseDriver.errors.UnknownCommandError('Unknown command, all the mobile commands except scroll have been removed.');

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// we only support mobile: scroll
//# sourceMappingURL=data:application/json;charset=utf8;base64,
