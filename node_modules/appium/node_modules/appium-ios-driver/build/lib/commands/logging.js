'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _deviceLogIosLog = require('../device-log/ios-log');

var _deviceLogIosLog2 = _interopRequireDefault(_deviceLogIosLog);

var _deviceLogIosCrashLog = require('../device-log/ios-crash-log');

var _deviceLogIosCrashLog2 = _interopRequireDefault(_deviceLogIosCrashLog);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {},
    helpers = {},
    extensions = {};

var SUPPORTED_LOG_TYPES = {
  'syslog': 'System Logs - Device logs for iOS applications on real devices and simulators',
  'crashlog': 'Crash Logs - Crash reports for iOS applications on real devices and simulators',
  'performance': 'Performance Logs - Debug Timelines on real devices and simulators'
};

commands.getLogTypes = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Retrieving supported log types');
        context$1$0.t0 = _lodash2['default'];
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.getFullLogTypes());

      case 4:
        context$1$0.t1 = context$1$0.sent;
        return context$1$0.abrupt('return', context$1$0.t0.keys.call(context$1$0.t0, context$1$0.t1));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

extensions.getFullLogTypes = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.abrupt('return', SUPPORTED_LOG_TYPES);

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getLog = function callee$0$0(logType) {
  var logTypes, logObject, logs;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Retrieving \'' + logType + '\' logs');
        // Check if passed logType is supported
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.getFullLogTypes());

      case 3:
        logTypes = context$1$0.sent;

        if (_lodash2['default'].has(logTypes, logType)) {
          context$1$0.next = 6;
          break;
        }

        throw new Error('Unsupported log type \'' + logType + '\' for this device. Supported types : ' + JSON.stringify(logTypes));

      case 6:
        if (!_lodash2['default'].isEmpty(this.logs)) {
          context$1$0.next = 8;
          break;
        }

        throw new Error('No logs currently available. Is the device/simulator started?');

      case 8:
        logObject = this.logs[logType];

        if (!logObject) {
          context$1$0.next = 15;
          break;
        }

        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(logObject.getLogs());

      case 12:
        context$1$0.t0 = context$1$0.sent;
        context$1$0.next = 16;
        break;

      case 15:
        context$1$0.t0 = null;

      case 16:
        logs = context$1$0.t0;

        if (!logs) {
          context$1$0.next = 21;
          break;
        }

        return context$1$0.abrupt('return', logs);

      case 21:
        throw new Error('No logs of type \'' + logType + '\' found.');

      case 22:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.startLogCapture = function callee$0$0(sim) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (_lodash2['default'].isEmpty(this.logs)) {
          context$1$0.next = 3;
          break;
        }

        _logger2['default'].warn("Trying to start iOS log capture but it's already started!");
        return context$1$0.abrupt('return');

      case 3:
        this.logs.crashlog = new _deviceLogIosCrashLog2['default']();
        this.logs.syslog = new _deviceLogIosLog2['default']({
          sim: sim,
          udid: this.opts.udid,
          showLogs: this.opts.showIOSLog,
          realDeviceLogger: this.opts.realDeviceLogger
        });
        context$1$0.prev = 5;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.logs.syslog.startCapture());

      case 8:
        context$1$0.next = 14;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](5);

        _logger2['default'].warn("Could not capture logs from device. Continuing without capturing logs.");
        return context$1$0.abrupt('return');

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.logs.crashlog.startCapture());

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 10]]);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports.SUPPORTED_LOG_TYPES = SUPPORTED_LOG_TYPES;
exports['default'] = extensions;

// make sure that we have logs at all
// otherwise it's not been initialized

// If logs captured successfully send response with data, else send error
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9sb2dnaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFBYyxRQUFROzs7OytCQUNILHVCQUF1Qjs7OztvQ0FDbEIsNkJBQTZCOzs7O3NCQUNsQyxXQUFXOzs7O0FBRzlCLElBQUksUUFBUSxHQUFHLEVBQUU7SUFBRSxPQUFPLEdBQUcsRUFBRTtJQUFFLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRWpELElBQU0sbUJBQW1CLEdBQUc7QUFDMUIsVUFBUSxFQUFFLCtFQUErRTtBQUN6RixZQUFVLEVBQUUsZ0ZBQWdGO0FBQzVGLGVBQWEsRUFBRSxtRUFBbUU7Q0FDbkYsQ0FBQzs7QUFFRixRQUFRLENBQUMsV0FBVyxHQUFHOzs7O0FBQ3JCLDRCQUFPLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDOzs7eUNBQzNCLElBQUksQ0FBQyxlQUFlLEVBQUU7Ozs7MkRBQWpDLElBQUk7Ozs7Ozs7Q0FDZCxDQUFDOztBQUVGLFVBQVUsQ0FBQyxlQUFlLEdBQUc7Ozs7NENBQ3BCLG1CQUFtQjs7Ozs7OztDQUMzQixDQUFDOztBQUVGLFFBQVEsQ0FBQyxNQUFNLEdBQUcsb0JBQWdCLE9BQU87TUFHakMsUUFBUSxFQVlWLFNBQVMsRUFDVCxJQUFJOzs7O0FBZlIsNEJBQU8sS0FBSyxtQkFBZ0IsT0FBTyxhQUFTLENBQUM7Ozt5Q0FFdEIsSUFBSSxDQUFDLGVBQWUsRUFBRTs7O0FBQXZDLGdCQUFROztZQUNULG9CQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDOzs7OztjQUNyQixJQUFJLEtBQUssNkJBQTBCLE9BQU8sOENBQXdDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUc7OzthQUtqSCxvQkFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7Ozs7Y0FDaEIsSUFBSSxLQUFLLENBQUMsK0RBQStELENBQUM7OztBQUk5RSxpQkFBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDOzthQUN2QixTQUFTOzs7Ozs7eUNBQVMsU0FBUyxDQUFDLE9BQU8sRUFBRTs7Ozs7Ozs7eUJBQUcsSUFBSTs7O0FBQW5ELFlBQUk7O2FBQ0osSUFBSTs7Ozs7NENBQ0MsSUFBSTs7O2NBRUwsSUFBSSxLQUFLLHdCQUFxQixPQUFPLGVBQVc7Ozs7Ozs7Q0FFekQsQ0FBQzs7QUFFRixPQUFPLENBQUMsZUFBZSxHQUFHLG9CQUFnQixHQUFHOzs7O1lBQ3RDLG9CQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDOzs7OztBQUN2Qiw0QkFBTyxJQUFJLENBQUMsMkRBQTJELENBQUMsQ0FBQzs7OztBQUczRSxZQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyx1Q0FBaUIsQ0FBQztBQUN2QyxZQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxpQ0FBVztBQUM1QixhQUFHLEVBQUgsR0FBRztBQUNILGNBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7QUFDcEIsa0JBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVU7QUFDOUIsMEJBQWdCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0I7U0FDN0MsQ0FBQyxDQUFDOzs7eUNBRUssSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFOzs7Ozs7Ozs7O0FBRXJDLDRCQUFPLElBQUksQ0FBQyx3RUFBd0UsQ0FBQyxDQUFDOzs7Ozt5Q0FHbEYsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFOzs7Ozs7O0NBQ3hDLENBQUM7O0FBR0YsZUFBYyxVQUFVLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLFFBQVEsR0FBUixRQUFRO1FBQUUsT0FBTyxHQUFQLE9BQU87UUFBRSxtQkFBbUIsR0FBbkIsbUJBQW1CO3FCQUNoQyxVQUFVIiwiZmlsZSI6ImxpYi9jb21tYW5kcy9sb2dnaW5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBJT1NMb2cgZnJvbSAnLi4vZGV2aWNlLWxvZy9pb3MtbG9nJztcbmltcG9ydCBJT1NDcmFzaExvZyBmcm9tICcuLi9kZXZpY2UtbG9nL2lvcy1jcmFzaC1sb2cnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuXG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuY29uc3QgU1VQUE9SVEVEX0xPR19UWVBFUyA9IHtcbiAgJ3N5c2xvZyc6ICdTeXN0ZW0gTG9ncyAtIERldmljZSBsb2dzIGZvciBpT1MgYXBwbGljYXRpb25zIG9uIHJlYWwgZGV2aWNlcyBhbmQgc2ltdWxhdG9ycycsXG4gICdjcmFzaGxvZyc6ICdDcmFzaCBMb2dzIC0gQ3Jhc2ggcmVwb3J0cyBmb3IgaU9TIGFwcGxpY2F0aW9ucyBvbiByZWFsIGRldmljZXMgYW5kIHNpbXVsYXRvcnMnLFxuICAncGVyZm9ybWFuY2UnOiAnUGVyZm9ybWFuY2UgTG9ncyAtIERlYnVnIFRpbWVsaW5lcyBvbiByZWFsIGRldmljZXMgYW5kIHNpbXVsYXRvcnMnXG59O1xuXG5jb21tYW5kcy5nZXRMb2dUeXBlcyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgbG9nZ2VyLmRlYnVnKCdSZXRyaWV2aW5nIHN1cHBvcnRlZCBsb2cgdHlwZXMnKTtcbiAgcmV0dXJuIF8ua2V5cyhhd2FpdCB0aGlzLmdldEZ1bGxMb2dUeXBlcygpKTtcbn07XG5cbmV4dGVuc2lvbnMuZ2V0RnVsbExvZ1R5cGVzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gU1VQUE9SVEVEX0xPR19UWVBFUztcbn07XG5cbmNvbW1hbmRzLmdldExvZyA9IGFzeW5jIGZ1bmN0aW9uIChsb2dUeXBlKSB7XG4gIGxvZ2dlci5kZWJ1ZyhgUmV0cmlldmluZyAnJHtsb2dUeXBlfScgbG9nc2ApO1xuICAvLyBDaGVjayBpZiBwYXNzZWQgbG9nVHlwZSBpcyBzdXBwb3J0ZWRcbiAgY29uc3QgbG9nVHlwZXMgPSBhd2FpdCB0aGlzLmdldEZ1bGxMb2dUeXBlcygpO1xuICBpZiAoIV8uaGFzKGxvZ1R5cGVzLCBsb2dUeXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgbG9nIHR5cGUgJyR7bG9nVHlwZX0nIGZvciB0aGlzIGRldmljZS4gU3VwcG9ydGVkIHR5cGVzIDogJHtKU09OLnN0cmluZ2lmeShsb2dUeXBlcyl9YCk7XG4gIH1cblxuICAvLyBtYWtlIHN1cmUgdGhhdCB3ZSBoYXZlIGxvZ3MgYXQgYWxsXG4gIC8vIG90aGVyd2lzZSBpdCdzIG5vdCBiZWVuIGluaXRpYWxpemVkXG4gIGlmIChfLmlzRW1wdHkodGhpcy5sb2dzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gbG9ncyBjdXJyZW50bHkgYXZhaWxhYmxlLiBJcyB0aGUgZGV2aWNlL3NpbXVsYXRvciBzdGFydGVkPycpO1xuICB9XG5cbiAgLy8gSWYgbG9ncyBjYXB0dXJlZCBzdWNjZXNzZnVsbHkgc2VuZCByZXNwb25zZSB3aXRoIGRhdGEsIGVsc2Ugc2VuZCBlcnJvclxuICBsZXQgbG9nT2JqZWN0ID0gdGhpcy5sb2dzW2xvZ1R5cGVdO1xuICBsZXQgbG9ncyA9IGxvZ09iamVjdCA/IGF3YWl0IGxvZ09iamVjdC5nZXRMb2dzKCkgOiBudWxsO1xuICBpZiAobG9ncykge1xuICAgIHJldHVybiBsb2dzO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgTm8gbG9ncyBvZiB0eXBlICcke2xvZ1R5cGV9JyBmb3VuZC5gKTtcbiAgfVxufTtcblxuaGVscGVycy5zdGFydExvZ0NhcHR1cmUgPSBhc3luYyBmdW5jdGlvbiAoc2ltKSB7XG4gIGlmICghXy5pc0VtcHR5KHRoaXMubG9ncykpIHtcbiAgICBsb2dnZXIud2FybihcIlRyeWluZyB0byBzdGFydCBpT1MgbG9nIGNhcHR1cmUgYnV0IGl0J3MgYWxyZWFkeSBzdGFydGVkIVwiKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sb2dzLmNyYXNobG9nID0gbmV3IElPU0NyYXNoTG9nKCk7XG4gIHRoaXMubG9ncy5zeXNsb2cgPSBuZXcgSU9TTG9nKHtcbiAgICBzaW0sXG4gICAgdWRpZDogdGhpcy5vcHRzLnVkaWQsXG4gICAgc2hvd0xvZ3M6IHRoaXMub3B0cy5zaG93SU9TTG9nLFxuICAgIHJlYWxEZXZpY2VMb2dnZXI6IHRoaXMub3B0cy5yZWFsRGV2aWNlTG9nZ2VyLFxuICB9KTtcbiAgdHJ5IHtcbiAgICBhd2FpdCB0aGlzLmxvZ3Muc3lzbG9nLnN0YXJ0Q2FwdHVyZSgpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2dnZXIud2FybihcIkNvdWxkIG5vdCBjYXB0dXJlIGxvZ3MgZnJvbSBkZXZpY2UuIENvbnRpbnVpbmcgd2l0aG91dCBjYXB0dXJpbmcgbG9ncy5cIik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGF3YWl0IHRoaXMubG9ncy5jcmFzaGxvZy5zdGFydENhcHR1cmUoKTtcbn07XG5cblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycywgU1VQUE9SVEVEX0xPR19UWVBFUyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
