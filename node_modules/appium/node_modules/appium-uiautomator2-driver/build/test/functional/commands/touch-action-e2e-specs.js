'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _wd = require('wd');

var _wd2 = _interopRequireDefault(_wd);

var _desired = require('../desired');

var _helpersSession = require('../helpers/session');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('apidemo - touch', function () {
  describe('multi-actions', function () {
    var _this = this;

    var driver = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_Object$assign({}, _desired.APIDEMOS_CAPS, {
              appPackage: 'io.appium.android.apis',
              appActivity: '.view.SplitTouchView'
            })));

          case 2:
            driver = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.quit());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should scroll two different lists', function callee$2$0() {
      var _ref, _ref2, leftEl, rightEl, leftGesture, rightGesture, multiAction;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementsByClassName('android.widget.ListView'));

          case 2:
            _ref = context$3$0.sent;
            _ref2 = _slicedToArray(_ref, 2);
            leftEl = _ref2[0];
            rightEl = _ref2[1];
            leftGesture = new _wd2['default'].TouchAction().press({ element: leftEl }).moveTo({ element: leftEl, x: 10, y: 0 }).moveTo({ element: leftEl, x: 10, y: -75 }).moveTo({ element: leftEl, x: 10, y: -150 });
            rightGesture = new _wd2['default'].TouchAction().press({ element: rightEl }).moveTo({ element: rightEl, x: 10, y: 0 }).moveTo({ element: rightEl, x: 10, y: -75 }).moveTo({ element: rightEl, x: 10, y: -150 });
            multiAction = new _wd2['default'].MultiAction();

            multiAction.add(leftGesture, rightGesture);

            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(driver.performMultiAction(multiAction));

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('swipe-action', function () {
    var _this2 = this;

    var driver = undefined;
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_Object$assign({}, _desired.APIDEMOS_CAPS, {
              appPackage: 'io.appium.android.apis',
              appActivity: '.view.List1'
            })));

          case 2:
            driver = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
    after(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.quit());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });

    function assertElement(driver) {
      var present = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
      var els;
      return _regeneratorRuntime.async(function assertElement$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.elementsByXPath("//*[@text='Abertam']"));

          case 2:
            els = context$3$0.sent;

            els.should.be.an['instanceof'](Array);
            els.should.have.length(present ? 1 : 0);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    }

    it('should swipe', function callee$2$0() {
      var action, el;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(assertElement(driver, true));

          case 2:
            action = new _wd2['default'].TouchAction();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.elementByXPath("//*[@text='Abertam']"));

          case 5:
            el = context$3$0.sent;

            action.press({ element: el }).wait(300).moveTo({ element: el, x: 0, y: -1500 }).release();
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(driver.performTouchAction(action));

          case 9:
            context$3$0.next = 11;
            return _regeneratorRuntime.awrap(assertElement(driver, false));

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy90b3VjaC1hY3Rpb24tZTJlLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7b0JBQWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O2tCQUM5QixJQUFJOzs7O3VCQUNXLFlBQVk7OzhCQUNmLG9CQUFvQjs7QUFHL0Msa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsaUJBQWlCLEVBQUUsWUFBWTtBQUN0QyxVQUFRLENBQUMsZUFBZSxFQUFFLFlBQVk7OztBQUNwQyxRQUFJLE1BQU0sWUFBQSxDQUFDO0FBQ1gsVUFBTSxDQUFDOzs7Ozs2Q0FDVSxnQ0FBVyxlQUFjLEVBQUUsMEJBQWlCO0FBQ3pELHdCQUFVLEVBQUUsd0JBQXdCO0FBQ3BDLHlCQUFXLEVBQUUsc0JBQXNCO2FBQ3BDLENBQUMsQ0FBQzs7O0FBSEgsa0JBQU07Ozs7Ozs7S0FJUCxDQUFDLENBQUM7QUFDSCxTQUFLLENBQUM7Ozs7OzZDQUNFLE1BQU0sQ0FBQyxJQUFJLEVBQUU7Ozs7Ozs7S0FDcEIsQ0FBQyxDQUFDOztBQUVILE1BQUUsQ0FBQyxtQ0FBbUMsRUFBRTt1QkFDakMsTUFBTSxFQUFFLE9BQU8sRUFFZCxXQUFXLEVBTVgsWUFBWSxFQU1aLFdBQVc7Ozs7Ozs2Q0FkYSxNQUFNLENBQUMsbUJBQW1CLENBQUMseUJBQXlCLENBQUM7Ozs7O0FBQTlFLGtCQUFNO0FBQUUsbUJBQU87QUFFZCx1QkFBVyxHQUFHLElBQUksZ0JBQUcsV0FBVyxFQUFFLENBQ3JDLEtBQUssQ0FBQyxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUN4QixNQUFNLENBQUMsRUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDLENBQ3RDLE1BQU0sQ0FBQyxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUN4QyxNQUFNLENBQUMsRUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFDLENBQUM7QUFFdEMsd0JBQVksR0FBRyxJQUFJLGdCQUFHLFdBQVcsRUFBRSxDQUN0QyxLQUFLLENBQUMsRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FDekIsTUFBTSxDQUFDLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUN2QyxNQUFNLENBQUMsRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FDekMsTUFBTSxDQUFDLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBQyxDQUFDO0FBRXZDLHVCQUFXLEdBQUcsSUFBSSxnQkFBRyxXQUFXLEVBQUU7O0FBQ3hDLHVCQUFXLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQzs7OzZDQUVyQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsV0FBVyxDQUFDOzs7Ozs7O0tBQzdDLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxVQUFRLENBQUMsY0FBYyxFQUFFLFlBQVk7OztBQUNuQyxRQUFJLE1BQU0sWUFBQSxDQUFDO0FBQ1gsVUFBTSxDQUFDOzs7Ozs2Q0FDVSxnQ0FBVyxlQUFjLEVBQUUsMEJBQWlCO0FBQ3pELHdCQUFVLEVBQUUsd0JBQXdCO0FBQ3BDLHlCQUFXLEVBQUUsYUFBYTthQUMzQixDQUFDLENBQUM7OztBQUhILGtCQUFNOzs7Ozs7O0tBSVAsQ0FBQyxDQUFDO0FBQ0gsU0FBSyxDQUFDOzs7Ozs2Q0FDRSxNQUFNLENBQUMsSUFBSSxFQUFFOzs7Ozs7O0tBQ3BCLENBQUMsQ0FBQzs7QUFFSCxhQUFlLGFBQWEsQ0FBRSxNQUFNO1VBQUUsT0FBTyx5REFBRyxJQUFJO1VBQzlDLEdBQUc7Ozs7OzZDQUFTLE1BQU0sQ0FBQyxlQUFlLENBQUMsc0JBQXNCLENBQUM7OztBQUExRCxlQUFHOztBQUNQLGVBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsY0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25DLGVBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0tBQ3pDOztBQUVELE1BQUUsQ0FBQyxjQUFjLEVBQUU7VUFFWCxNQUFNLEVBQ1IsRUFBRTs7Ozs7NkNBRkEsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUM7OztBQUMzQixrQkFBTSxHQUFHLElBQUksZ0JBQUcsV0FBVyxFQUFFOzs2Q0FDcEIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQzs7O0FBQXhELGNBQUU7O0FBQ04sa0JBQU0sQ0FBQyxLQUFLLENBQUMsRUFBQyxPQUFPLEVBQUUsRUFBRSxFQUFDLENBQUMsQ0FDeEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUNULE1BQU0sQ0FBQyxFQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUNyQyxPQUFPLEVBQUUsQ0FBQzs7NkNBQ1AsTUFBTSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQzs7Ozs2Q0FDakMsYUFBYSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUM7Ozs7Ozs7S0FDbkMsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy90b3VjaC1hY3Rpb24tZTJlLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgd2QgZnJvbSAnd2QnO1xuaW1wb3J0IHsgQVBJREVNT1NfQ0FQUyB9IGZyb20gJy4uL2Rlc2lyZWQnO1xuaW1wb3J0IHsgaW5pdERyaXZlciB9IGZyb20gJy4uL2hlbHBlcnMvc2Vzc2lvbic7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ2FwaWRlbW8gLSB0b3VjaCcsIGZ1bmN0aW9uICgpIHtcbiAgZGVzY3JpYmUoJ211bHRpLWFjdGlvbnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGRyaXZlcjtcbiAgICBiZWZvcmUoYXN5bmMgKCkgPT4ge1xuICAgICAgZHJpdmVyID0gYXdhaXQgaW5pdERyaXZlcihPYmplY3QuYXNzaWduKHt9LCBBUElERU1PU19DQVBTLCB7XG4gICAgICAgIGFwcFBhY2thZ2U6ICdpby5hcHBpdW0uYW5kcm9pZC5hcGlzJyxcbiAgICAgICAgYXBwQWN0aXZpdHk6ICcudmlldy5TcGxpdFRvdWNoVmlldycsXG4gICAgICB9KSk7XG4gICAgfSk7XG4gICAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZHJpdmVyLnF1aXQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc2Nyb2xsIHR3byBkaWZmZXJlbnQgbGlzdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgW2xlZnRFbCwgcmlnaHRFbF0gPSBhd2FpdCBkcml2ZXIuZWxlbWVudHNCeUNsYXNzTmFtZSgnYW5kcm9pZC53aWRnZXQuTGlzdFZpZXcnKTtcblxuICAgICAgY29uc3QgbGVmdEdlc3R1cmUgPSBuZXcgd2QuVG91Y2hBY3Rpb24oKVxuICAgICAgICAucHJlc3Moe2VsZW1lbnQ6IGxlZnRFbH0pXG4gICAgICAgIC5tb3ZlVG8oe2VsZW1lbnQ6IGxlZnRFbCwgeDogMTAsIHk6IDB9KVxuICAgICAgICAubW92ZVRvKHtlbGVtZW50OiBsZWZ0RWwsIHg6IDEwLCB5OiAtNzV9KVxuICAgICAgICAubW92ZVRvKHtlbGVtZW50OiBsZWZ0RWwsIHg6IDEwLCB5OiAtMTUwfSk7XG5cbiAgICAgIGNvbnN0IHJpZ2h0R2VzdHVyZSA9IG5ldyB3ZC5Ub3VjaEFjdGlvbigpXG4gICAgICAgIC5wcmVzcyh7ZWxlbWVudDogcmlnaHRFbH0pXG4gICAgICAgIC5tb3ZlVG8oe2VsZW1lbnQ6IHJpZ2h0RWwsIHg6IDEwLCB5OiAwfSlcbiAgICAgICAgLm1vdmVUbyh7ZWxlbWVudDogcmlnaHRFbCwgeDogMTAsIHk6IC03NX0pXG4gICAgICAgIC5tb3ZlVG8oe2VsZW1lbnQ6IHJpZ2h0RWwsIHg6IDEwLCB5OiAtMTUwfSk7XG5cbiAgICAgIGNvbnN0IG11bHRpQWN0aW9uID0gbmV3IHdkLk11bHRpQWN0aW9uKCk7XG4gICAgICBtdWx0aUFjdGlvbi5hZGQobGVmdEdlc3R1cmUsIHJpZ2h0R2VzdHVyZSk7XG5cbiAgICAgIGF3YWl0IGRyaXZlci5wZXJmb3JtTXVsdGlBY3Rpb24obXVsdGlBY3Rpb24pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnc3dpcGUtYWN0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgIGxldCBkcml2ZXI7XG4gICAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICAgIGRyaXZlciA9IGF3YWl0IGluaXREcml2ZXIoT2JqZWN0LmFzc2lnbih7fSwgQVBJREVNT1NfQ0FQUywge1xuICAgICAgICBhcHBQYWNrYWdlOiAnaW8uYXBwaXVtLmFuZHJvaWQuYXBpcycsXG4gICAgICAgIGFwcEFjdGl2aXR5OiAnLnZpZXcuTGlzdDEnLFxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIGFmdGVyKGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IGRyaXZlci5xdWl0KCk7XG4gICAgfSk7XG5cbiAgICBhc3luYyBmdW5jdGlvbiBhc3NlcnRFbGVtZW50IChkcml2ZXIsIHByZXNlbnQgPSB0cnVlKSB7XG4gICAgICBsZXQgZWxzID0gYXdhaXQgZHJpdmVyLmVsZW1lbnRzQnlYUGF0aChcIi8vKltAdGV4dD0nQWJlcnRhbSddXCIpO1xuICAgICAgZWxzLnNob3VsZC5iZS5hbi5pbnN0YW5jZW9mKEFycmF5KTtcbiAgICAgIGVscy5zaG91bGQuaGF2ZS5sZW5ndGgocHJlc2VudCA/IDEgOiAwKTtcbiAgICB9XG5cbiAgICBpdCgnc2hvdWxkIHN3aXBlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgYXNzZXJ0RWxlbWVudChkcml2ZXIsIHRydWUpO1xuICAgICAgY29uc3QgYWN0aW9uID0gbmV3IHdkLlRvdWNoQWN0aW9uKCk7XG4gICAgICBsZXQgZWwgPSBhd2FpdCBkcml2ZXIuZWxlbWVudEJ5WFBhdGgoXCIvLypbQHRleHQ9J0FiZXJ0YW0nXVwiKTtcbiAgICAgIGFjdGlvbi5wcmVzcyh7ZWxlbWVudDogZWx9KVxuICAgICAgICAud2FpdCgzMDApXG4gICAgICAgIC5tb3ZlVG8oe2VsZW1lbnQ6IGVsLCB4OiAwLCB5OiAtMTUwMH0pXG4gICAgICAgIC5yZWxlYXNlKCk7XG4gICAgICBhd2FpdCBkcml2ZXIucGVyZm9ybVRvdWNoQWN0aW9uKGFjdGlvbik7XG4gICAgICBhd2FpdCBhc3NlcnRFbGVtZW50KGRyaXZlciwgZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
