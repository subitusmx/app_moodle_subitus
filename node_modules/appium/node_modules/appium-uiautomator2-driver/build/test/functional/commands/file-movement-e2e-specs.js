'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _stream = require('stream');

var _stream2 = _interopRequireDefault(_stream);

var _unzip = require('unzip');

var _unzip2 = _interopRequireDefault(_unzip);

var _desired = require('../desired');

var _helpersSession = require('../helpers/session');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('file movement', function () {
  var _this = this;

  var driver = undefined;
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _helpersSession.initDriver)(_desired.APIDEMOS_CAPS));

        case 2:
          driver = context$2$0.sent;

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.quit());

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  function getRandomDir() {
    return '/data/local/tmp/test' + Math.random();
  }

  it('should push and pull a file', function callee$1$0() {
    var stringData, base64Data, remotePath, remoteData64, remoteData;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          stringData = 'random string data ' + Math.random();
          base64Data = new Buffer(stringData).toString('base64');
          remotePath = getRandomDir() + '/remote.txt';
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(driver.pushFile(remotePath, base64Data));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(driver.pullFile(remotePath));

        case 7:
          remoteData64 = context$2$0.sent;
          remoteData = new Buffer(remoteData64, 'base64').toString();

          remoteData.should.equal(stringData);

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should pull a folder', function callee$1$0() {
    var stringData, base64Data, remoteDir, data, zipPromise;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          stringData = 'random string data ' + Math.random();
          base64Data = new Buffer(stringData).toString('base64');
          remoteDir = getRandomDir();
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(driver.pushFile(remoteDir + '/remote0.txt', base64Data));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(driver.pushFile(remoteDir + '/remote1.txt', base64Data));

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(driver.pullFolder(remoteDir));

        case 9:
          data = context$2$0.sent;
          zipPromise = new _bluebird2['default'](function (resolve) {
            var entryCount = 0;
            var zipStream = new _stream2['default'].Readable();
            zipStream._read = _lodash2['default'].noop;
            zipStream.pipe(_unzip2['default'].Parse()).on('entry', function (entry) {
              entryCount++;
              entry.autodrain();
            }).on('close', function () {
              resolve(entryCount);
            });
            zipStream.push(data, 'base64');
            zipStream.push(null);
          });
          context$2$0.next = 13;
          return _regeneratorRuntime.awrap(zipPromise);

        case 13:
          context$2$0.sent.should.equal(2);

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// get the file and its contents, to check

// send the files, then pull the whole folder

// TODO: 'pullFolder' is returning 404 error

// go through the folder we pulled and make sure the
// two files we pushed are in it
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy9maWxlLW1vdmVtZW50LWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7b0JBQWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O3NCQUMvQixRQUFROzs7O3dCQUNSLFVBQVU7Ozs7c0JBQ0wsUUFBUTs7OztxQkFDVCxPQUFPOzs7O3VCQUNLLFlBQVk7OzhCQUNmLG9CQUFvQjs7QUFHL0Msa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsZUFBZSxFQUFFLFlBQVk7OztBQUNwQyxNQUFJLE1BQU0sWUFBQSxDQUFDO0FBQ1gsUUFBTSxDQUFDOzs7OzsyQ0FDVSx1REFBeUI7OztBQUF4QyxnQkFBTTs7Ozs7OztHQUNQLENBQUMsQ0FBQztBQUNILE9BQUssQ0FBQzs7Ozs7MkNBQ0UsTUFBTSxDQUFDLElBQUksRUFBRTs7Ozs7OztHQUNwQixDQUFDLENBQUM7O0FBRUgsV0FBUyxZQUFZLEdBQUk7QUFDdkIsb0NBQThCLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBRztHQUMvQzs7QUFFRCxJQUFFLENBQUMsNkJBQTZCLEVBQUU7UUFDNUIsVUFBVSxFQUNWLFVBQVUsRUFDVixVQUFVLEVBS1YsWUFBWSxFQUNaLFVBQVU7Ozs7QUFSVixvQkFBVSwyQkFBeUIsSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNoRCxvQkFBVSxHQUFHLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7QUFDdEQsb0JBQVUsR0FBTSxZQUFZLEVBQUU7OzJDQUU1QixNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUM7Ozs7MkNBR3BCLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDOzs7QUFBaEQsc0JBQVk7QUFDWixvQkFBVSxHQUFHLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUU7O0FBQzlELG9CQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQzs7Ozs7OztHQUNyQyxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLHNCQUFzQixFQUFFO1FBQ3JCLFVBQVUsRUFDVixVQUFVLEVBR1YsU0FBUyxFQUtULElBQUksRUFJSixVQUFVOzs7O0FBYlYsb0JBQVUsMkJBQXlCLElBQUksQ0FBQyxNQUFNLEVBQUU7QUFDaEQsb0JBQVUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO0FBR3RELG1CQUFTLEdBQUcsWUFBWSxFQUFFOzsyQ0FDeEIsTUFBTSxDQUFDLFFBQVEsQ0FBSSxTQUFTLG1CQUFnQixVQUFVLENBQUM7Ozs7MkNBQ3ZELE1BQU0sQ0FBQyxRQUFRLENBQUksU0FBUyxtQkFBZ0IsVUFBVSxDQUFDOzs7OzJDQUc1QyxNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQzs7O0FBQXpDLGNBQUk7QUFJSixvQkFBVSxHQUFHLDBCQUFNLFVBQUMsT0FBTyxFQUFLO0FBQ2xDLGdCQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFDbkIsZ0JBQUksU0FBUyxHQUFHLElBQUksb0JBQU8sUUFBUSxFQUFFLENBQUM7QUFDdEMscUJBQVMsQ0FBQyxLQUFLLEdBQUcsb0JBQUUsSUFBSSxDQUFDO0FBQ3pCLHFCQUFTLENBQ04sSUFBSSxDQUFDLG1CQUFNLEtBQUssRUFBRSxDQUFDLENBQ25CLEVBQUUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxLQUFLLEVBQUU7QUFDNUIsd0JBQVUsRUFBRSxDQUFDO0FBQ2IsbUJBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUNuQixDQUFDLENBQ0QsRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFZO0FBQ3ZCLHFCQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDckIsQ0FBQyxDQUFDO0FBQ0wscUJBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQy9CLHFCQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1dBQ3RCLENBQUM7OzJDQUVLLFVBQVU7OzsyQkFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Ozs7Ozs7R0FDbEMsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy9maWxlLW1vdmVtZW50LWUyZS1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBzdHJlYW0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCBVbnppcCBmcm9tICd1bnppcCc7XG5pbXBvcnQgeyBBUElERU1PU19DQVBTIH0gZnJvbSAnLi4vZGVzaXJlZCc7XG5pbXBvcnQgeyBpbml0RHJpdmVyIH0gZnJvbSAnLi4vaGVscGVycy9zZXNzaW9uJztcblxuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5kZXNjcmliZSgnZmlsZSBtb3ZlbWVudCcsIGZ1bmN0aW9uICgpIHtcbiAgbGV0IGRyaXZlcjtcbiAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICBkcml2ZXIgPSBhd2FpdCBpbml0RHJpdmVyKEFQSURFTU9TX0NBUFMpO1xuICB9KTtcbiAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGRyaXZlci5xdWl0KCk7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGdldFJhbmRvbURpciAoKSB7XG4gICAgcmV0dXJuIGAvZGF0YS9sb2NhbC90bXAvdGVzdCR7TWF0aC5yYW5kb20oKX1gO1xuICB9XG5cbiAgaXQoJ3Nob3VsZCBwdXNoIGFuZCBwdWxsIGEgZmlsZScsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgc3RyaW5nRGF0YSA9IGByYW5kb20gc3RyaW5nIGRhdGEgJHtNYXRoLnJhbmRvbSgpfWA7XG4gICAgbGV0IGJhc2U2NERhdGEgPSBuZXcgQnVmZmVyKHN0cmluZ0RhdGEpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICBsZXQgcmVtb3RlUGF0aCA9IGAke2dldFJhbmRvbURpcigpfS9yZW1vdGUudHh0YDtcblxuICAgIGF3YWl0IGRyaXZlci5wdXNoRmlsZShyZW1vdGVQYXRoLCBiYXNlNjREYXRhKTtcblxuICAgIC8vIGdldCB0aGUgZmlsZSBhbmQgaXRzIGNvbnRlbnRzLCB0byBjaGVja1xuICAgIGxldCByZW1vdGVEYXRhNjQgPSBhd2FpdCBkcml2ZXIucHVsbEZpbGUocmVtb3RlUGF0aCk7XG4gICAgbGV0IHJlbW90ZURhdGEgPSBuZXcgQnVmZmVyKHJlbW90ZURhdGE2NCwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCk7XG4gICAgcmVtb3RlRGF0YS5zaG91bGQuZXF1YWwoc3RyaW5nRGF0YSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcHVsbCBhIGZvbGRlcicsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgc3RyaW5nRGF0YSA9IGByYW5kb20gc3RyaW5nIGRhdGEgJHtNYXRoLnJhbmRvbSgpfWA7XG4gICAgbGV0IGJhc2U2NERhdGEgPSBuZXcgQnVmZmVyKHN0cmluZ0RhdGEpLnRvU3RyaW5nKCdiYXNlNjQnKTtcblxuICAgIC8vIHNlbmQgdGhlIGZpbGVzLCB0aGVuIHB1bGwgdGhlIHdob2xlIGZvbGRlclxuICAgIGxldCByZW1vdGVEaXIgPSBnZXRSYW5kb21EaXIoKTtcbiAgICBhd2FpdCBkcml2ZXIucHVzaEZpbGUoYCR7cmVtb3RlRGlyfS9yZW1vdGUwLnR4dGAsIGJhc2U2NERhdGEpO1xuICAgIGF3YWl0IGRyaXZlci5wdXNoRmlsZShgJHtyZW1vdGVEaXJ9L3JlbW90ZTEudHh0YCwgYmFzZTY0RGF0YSk7XG5cbiAgICAvLyBUT0RPOiAncHVsbEZvbGRlcicgaXMgcmV0dXJuaW5nIDQwNCBlcnJvclxuICAgIGxldCBkYXRhID0gYXdhaXQgZHJpdmVyLnB1bGxGb2xkZXIocmVtb3RlRGlyKTtcblxuICAgIC8vIGdvIHRocm91Z2ggdGhlIGZvbGRlciB3ZSBwdWxsZWQgYW5kIG1ha2Ugc3VyZSB0aGVcbiAgICAvLyB0d28gZmlsZXMgd2UgcHVzaGVkIGFyZSBpbiBpdFxuICAgIGxldCB6aXBQcm9taXNlID0gbmV3IEIoKHJlc29sdmUpID0+IHtcbiAgICAgIGxldCBlbnRyeUNvdW50ID0gMDtcbiAgICAgIGxldCB6aXBTdHJlYW0gPSBuZXcgc3RyZWFtLlJlYWRhYmxlKCk7XG4gICAgICB6aXBTdHJlYW0uX3JlYWQgPSBfLm5vb3A7XG4gICAgICB6aXBTdHJlYW1cbiAgICAgICAgLnBpcGUoVW56aXAuUGFyc2UoKSlcbiAgICAgICAgLm9uKCdlbnRyeScsIGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgIGVudHJ5Q291bnQrKztcbiAgICAgICAgICBlbnRyeS5hdXRvZHJhaW4oKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXNvbHZlKGVudHJ5Q291bnQpO1xuICAgICAgICB9KTtcbiAgICAgIHppcFN0cmVhbS5wdXNoKGRhdGEsICdiYXNlNjQnKTtcbiAgICAgIHppcFN0cmVhbS5wdXNoKG51bGwpO1xuICAgIH0pO1xuXG4gICAgKGF3YWl0IHppcFByb21pc2UpLnNob3VsZC5lcXVhbCgyKTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4ifQ==
