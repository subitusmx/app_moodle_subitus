require('source-map-support').install();

'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this5 = this;

var _indexJs = require('../../index.js');

var _helpersRemoteDebuggerServer = require('../helpers/remote-debugger-server');

var _helpersServerSetup = require('../helpers/server-setup');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('RemoteDebugger', function () {
  var rd = undefined;
  var rds = [];
  beforeEach(function () {
    var opts = {
      bundleId: _helpersRemoteDebuggerServer.APP_INFO['PID:42'].bundleId,
      platformVersion: '8.3',
      useNewSafari: true,
      pageLoadMs: 5000,
      port: 27754,
      debuggerType: _indexJs.DEBUGGER_TYPES.webinspector };
    rd = new _indexJs.RemoteDebugger(opts);
    rds[0] = rd;
  });

  function requireAppIdKey(fn, args) {
    var _this = this;

    it('should fail if no app selected', function callee$2$0() {
      var _rd;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // make sure there is no app id key (set during selectApp)
            rd.appIdKey = null;

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((_rd = rd)[fn].apply(_rd, _toConsumableArray(args)).should.be.rejectedWith('appIdKey'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }
  function requirePageIdKey(fn, args) {
    var _this2 = this;

    it('should fail if no page selected', function callee$2$0() {
      var _rd2;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // make sure there is no page id key (set during selectPage)
            rd.pageIdKey = null;

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((_rd2 = rd)[fn].apply(_rd2, _toConsumableArray(args)).should.be.rejectedWith('pageIdKey'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  }
  function confirmRpcSend(fn, args) {
    var _this3 = this;

    var num = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];

    it('should send an rpc message', function callee$2$0() {
      var _rd3;

      var spy;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            spy = _sinon2['default'].spy(rd.rpcClient, 'send');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((_rd3 = rd)[fn].apply(_rd3, _toConsumableArray(args)));

          case 3:
            spy.callCount.should.equal(num);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this3);
    });
  }
  function confirmRemoteDebuggerErrorHandling(server, fn, args) {
    var _this4 = this;

    var errText = arguments.length <= 3 || arguments[3] === undefined ? 'remote debugger error' : arguments[3];

    it('should handle error from remote debugger', function callee$2$0() {
      var _rd4;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            server.setDataResponseError(errText);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((_rd4 = rd)[fn].apply(_rd4, _toConsumableArray(args)).should.be.rejectedWith(errText));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this4);
    });
  }

  describe('#connect', function () {
    var server = new _helpersRemoteDebuggerServer.RemoteDebuggerServer();

    beforeEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(server.start());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(server.stop());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });

    it('should return application information', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(rd.connect());

          case 2:
            context$3$0.t0 = _helpersRemoteDebuggerServer.APP_INFO;
            context$3$0.sent.should.eql(context$3$0.t0);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    it('should set the connection key', function callee$2$0() {
      var spy;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            spy = _sinon2['default'].spy(rd, 'setConnectionKey');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(rd.connect());

          case 3:
            spy.calledOnce.should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
  });

  describe('#disconnect', (0, _helpersServerSetup.withConnectedServer)(rds, function () {
    it('should disconnect from the rpc client', function callee$2$0() {
      var spy;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            spy = _sinon2['default'].spy(rd.rpcClient, 'disconnect');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(rd.disconnect());

          case 3:
            spy.calledOnce.should.be['true'];
            spy.restore();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    it('should emit an appropriate event', function callee$2$0() {
      var spy;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            spy = _sinon2['default'].spy();

            rd.on(_indexJs.RemoteDebugger.EVENT_DISCONNECT, spy);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(rd.disconnect());

          case 4:
            spy.calledOnce.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
  }));

  describe('#selectApp', (0, _helpersServerSetup.withConnectedServer)(rds, function (server) {
    confirmRpcSend('selectApp', []);
    it('should be able to handle an app change event before selection', function callee$2$0() {
      var initialIdKey, timeout, start, spy, selectPromise;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            this.timeout(10000);

            initialIdKey = rd.appIdKey;

            // change the app immediately
            server.changeApp(1, true);

            // need to wait for the change to have been received
            // wait up to 2 seconds
            timeout = 2000;
            start = Date.now();

          case 5:
            if (!(Date.now() <= start + timeout)) {
              context$3$0.next = 12;
              break;
            }

            if (!(rd.appIdKey !== initialIdKey)) {
              context$3$0.next = 8;
              break;
            }

            return context$3$0.abrupt('break', 12);

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

          case 10:
            context$3$0.next = 5;
            break;

          case 12:
            spy = _sinon2['default'].spy(rd.rpcClient, 'selectApp');
            selectPromise = rd.selectApp();

            server.sendPageInfoMessage('PID:42');
            server.sendPageInfoMessage('PID:44');

            context$3$0.next = 18;
            return _regeneratorRuntime.awrap(selectPromise);

          case 18:

            rd.appIdKey.should.equal('PID:42');
            spy.calledOnce.should.be['true'];

          case 20:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('should be able to handle an app change event during selection', function callee$2$0() {
      var spy, selectPromise;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // change the app when the selectApp call gets in
            server.changeApp(1, false);

            spy = _sinon2['default'].spy(rd.rpcClient, 'selectApp');
            selectPromise = rd.selectApp();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

          case 5:
            server.sendPageInfoMessage('PID:44');
            server.sendPageInfoMessage('PID:42');
            server.sendPageInfoMessage('PID:46');

            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(selectPromise);

          case 10:

            spy.calledTwice.should.be['true'];

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    it('should not connect to app if url is about:blank and ignoreAboutBlankUrl is passed true to selectApp', function callee$2$0() {
      var selectPromise;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            selectPromise = rd.selectApp({ ignoreAboutBlankUrl: true });
            context$3$0.prev = 1;
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(selectPromise);

          case 4:
            context$3$0.next = 9;
            break;

          case 6:
            context$3$0.prev = 6;
            context$3$0.t0 = context$3$0['catch'](1);

            context$3$0.t0.message.should.include('Could not connect to a valid app');

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5, [[1, 6]]);
    });
  }));

  describe('#selectPage', (0, _helpersServerSetup.withConnectedServer)(rds, function (server) {
    confirmRpcSend('selectPage', [1, 2, true], 3);
    confirmRpcSend('selectPage', [1, 2, false], 4);
    confirmRemoteDebuggerErrorHandling(server, 'selectPage', [1, 2]);
  }));

  describe('#execute', (0, _helpersServerSetup.withConnectedServer)(rds, function () {
    requireAppIdKey('execute', []);
    requirePageIdKey('execute', []);
    confirmRpcSend('execute', ['document.getElementsByTagName("html")[0].outerHTML']);
  }));

  describe('#checkPageIsReady', (0, _helpersServerSetup.withConnectedServer)(rds, function (server) {
    requireAppIdKey('checkPageIsReady', []);
    confirmRpcSend('checkPageIsReady', []);
    it('should return true when server responds with complete', function callee$2$0() {
      var ready;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            server.setDataResponseValue('complete');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(rd.checkPageIsReady());

          case 3:
            ready = context$3$0.sent;

            ready.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    it('should return false when server responds with loading', function callee$2$0() {
      var ready;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            server.setDataResponseValue('loading');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(rd.checkPageIsReady());

          case 3:
            ready = context$3$0.sent;

            ready.should.be['false'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    confirmRemoteDebuggerErrorHandling(server, 'checkPageIsReady', []);
  }));

  describe('#executeAtom', (0, _helpersServerSetup.withConnectedServer)(rds, function (server) {
    confirmRpcSend('executeAtom', ['find_element', [], []]);
    it('should execute the atom', function callee$2$0() {
      var sentElement, element;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sentElement = { ELEMENT: ':wdc:1435784377545' };

            server.setDataResponseValue(sentElement);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(rd.executeAtom('find_element', [], []));

          case 4:
            element = context$3$0.sent;

            element.should.eql(sentElement);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    confirmRemoteDebuggerErrorHandling(server, 'executeAtom', ['find_element', [], []]);
  }));

  describe('timeline', (0, _helpersServerSetup.withConnectedServer)(rds, function () {
    describe('#startTimeline', function () {
      var timelineCallback = _sinon2['default'].spy();
      confirmRpcSend('startTimeline', [timelineCallback]);
    });

    describe('#stopTimeline', function () {
      confirmRpcSend('stopTimeline', []);
    });
  }));

  describe('#waitForFrameNavigated', (0, _helpersServerSetup.withConnectedServer)(rds, function (server) {
    it('should work when the delay is cancelled but the server sends message', function callee$2$0() {
      var p, source;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            p = rd.waitForFrameNavigated();

            rd.navigationDelay.cancel();

            // make the server send the navigation message
            server.sendFrameNavigationMessage();

            // wait for rd.waitForFrameNavigated() to finish
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(p);

          case 5:
            source = context$3$0.sent;

            source.should.equal('remote-debugger');

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    it('should timeout and finish when server does not send message', function callee$2$0() {
      var source;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(rd.waitForFrameNavigated());

          case 2:
            source = context$3$0.sent;

            source.should.equal('timeout');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
  }));

  describe('#navToUrl', (0, _helpersServerSetup.withConnectedServer)(rds, function () {
    var url = 'http://appium.io';

    requireAppIdKey('navToUrl', [url]);
    requirePageIdKey('navToUrl', [url]);
    confirmRpcSend('navToUrl', [url], 2);
  }));

  describe('#callFunction', (0, _helpersServerSetup.withConnectedServer)(rds, function () {
    requireAppIdKey('callFunction', []);
    requirePageIdKey('callFunction', []);
    confirmRpcSend('callFunction', []);
  }));

  describe('#pageLoad', (0, _helpersServerSetup.withConnectedServer)(rds, function (server) {
    it('should call #checkPageIsReady', function callee$2$0() {
      var spy;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            spy = _sinon2['default'].spy(rd, 'checkPageIsReady');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(rd.pageLoad());

          case 3:
            spy.calledOnce.should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    it('should not call #checkPageIsReady if delay is cancelled', function callee$2$0() {
      var spy, p;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            spy = _sinon2['default'].spy(rd, 'checkPageIsReady');
            p = rd.pageLoad();

            rd.pageLoadDelay.cancel();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(p);

          case 5:
            spy.called.should.be['false'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    it('should retry if page is not ready', function callee$2$0() {
      var spy;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // give a long timeout so we can get the response from the server
            rd.pageLoadMs = 10000;

            // make the server respond first with random status, then with complete
            server.setDataResponseValue('loading');
            server.setDataResponseValue('complete');

            spy = _sinon2['default'].spy(rd, 'checkPageIsReady');
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(rd.pageLoad());

          case 6:
            spy.calledTwice.should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
  }));

  describe('socket errors', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      var _this6 = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          it('should handle socket connect error', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(rd.connect().should.be.rejected);

                case 2:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this6);
          });

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this5);
  });
});

// once the appIdKey has changed, we are good to go
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9yZW1vdGUtZGVidWdnZXItc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O3VCQUUrQyxnQkFBZ0I7OzJDQUNoQixtQ0FBbUM7O2tDQUM5Qyx5QkFBeUI7O29CQUM1QyxNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztxQkFDM0IsT0FBTzs7Ozt3QkFDTCxVQUFVOzs7O0FBRzlCLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFHekIsUUFBUSxDQUFDLGdCQUFnQixFQUFFLFlBQU07QUFDL0IsTUFBSSxFQUFFLFlBQUEsQ0FBQztBQUNQLE1BQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNiLFlBQVUsQ0FBQyxZQUFNO0FBQ2YsUUFBSSxJQUFJLEdBQUc7QUFDVCxjQUFRLEVBQUUsc0NBQVMsUUFBUSxDQUFDLENBQUMsUUFBUTtBQUNyQyxxQkFBZSxFQUFFLEtBQUs7QUFDdEIsa0JBQVksRUFBRSxJQUFJO0FBQ2xCLGdCQUFVLEVBQUUsSUFBSTtBQUNoQixVQUFJLEVBQUUsS0FBSztBQUNYLGtCQUFZLEVBQUUsd0JBQWUsWUFBWSxFQUFDLENBQUM7QUFDN0MsTUFBRSxHQUFHLDRCQUFtQixJQUFJLENBQUMsQ0FBQztBQUM5QixPQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0dBQ2IsQ0FBQyxDQUFDOztBQUVILFdBQVMsZUFBZSxDQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUU7OztBQUNsQyxNQUFFLENBQUMsZ0NBQWdDLEVBQUU7Ozs7Ozs7QUFFbkMsY0FBRSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7Ozs2Q0FFYixPQUFBLEVBQUUsRUFBQyxFQUFFLE9BQUMseUJBQUksSUFBSSxFQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDOzs7Ozs7O0tBQ3pELENBQUMsQ0FBQztHQUNKO0FBQ0QsV0FBUyxnQkFBZ0IsQ0FB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LENBQUM7O0FBRUosVUFBUSxDQUFDLGVBQWUsRUFBRTs7Ozs7O0FBQ3hCLFlBQUUsQ0FBQyxvQ0FBb0MsRUFBRTs7Ozs7bURBQ2pDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVE7Ozs7Ozs7V0FDdEMsQ0FBQyxDQUFDOzs7Ozs7O0dBQ0osQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvdW5pdC9yZW1vdGUtZGVidWdnZXItc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcblxuaW1wb3J0IHsgUmVtb3RlRGVidWdnZXIsIERFQlVHR0VSX1RZUEVTIH0gZnJvbSAnLi4vLi4vaW5kZXguanMnO1xuaW1wb3J0IHsgUmVtb3RlRGVidWdnZXJTZXJ2ZXIsIEFQUF9JTkZPIH0gZnJvbSAnLi4vaGVscGVycy9yZW1vdGUtZGVidWdnZXItc2VydmVyJztcbmltcG9ydCB7IHdpdGhDb25uZWN0ZWRTZXJ2ZXIgfSBmcm9tICcuLi9oZWxwZXJzL3NlcnZlci1zZXR1cCc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCc7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuXG5kZXNjcmliZSgnUmVtb3RlRGVidWdnZXInLCAoKSA9PiB7XG4gIGxldCByZDtcbiAgbGV0IHJkcyA9IFtdO1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBsZXQgb3B0cyA9IHtcbiAgICAgIGJ1bmRsZUlkOiBBUFBfSU5GT1snUElEOjQyJ10uYnVuZGxlSWQsXG4gICAgICBwbGF0Zm9ybVZlcnNpb246ICc4LjMnLFxuICAgICAgdXNlTmV3U2FmYXJpOiB0cnVlLFxuICAgICAgcGFnZUxvYWRNczogNTAwMCxcbiAgICAgIHBvcnQ6IDI3NzU0LFxuICAgICAgZGVidWdnZXJUeXBlOiBERUJVR0dFUl9UWVBFUy53ZWJpbnNwZWN0b3J9O1xuICAgIHJkID0gbmV3IFJlbW90ZURlYnVnZ2VyKG9wdHMpO1xuICAgIHJkc1swXSA9IHJkO1xuICB9KTtcblxuICBmdW5jdGlvbiByZXF1aXJlQXBwSWRLZXkgKGZuLCBhcmdzKSB7XG4gICAgaXQoJ3Nob3VsZCBmYWlsIGlmIG5vIGFwcCBzZWxlY3RlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0aGVyZSBpcyBubyBhcHAgaWQga2V5IChzZXQgZHVyaW5nIHNlbGVjdEFwcClcbiAgICAgIHJkLmFwcElkS2V5ID0gbnVsbDtcblxuICAgICAgYXdhaXQgcmRbZm5dKC4uLmFyZ3MpLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoJ2FwcElkS2V5Jyk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVxdWlyZVBhZ2VJZEtleSAoZm4sIGFyZ3MpIHtcbiAgICBpdCgnc2hvdWxkIGZhaWwgaWYgbm8gcGFnZSBzZWxlY3RlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0aGVyZSBpcyBubyBwYWdlIGlkIGtleSAoc2V0IGR1cmluZyBzZWxlY3RQYWdlKVxuICAgICAgcmQucGFnZUlkS2V5ID0gbnVsbDtcblxuICAgICAgYXdhaXQgcmRbZm5dKC4uLmFyZ3MpLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoJ3BhZ2VJZEtleScpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGNvbmZpcm1ScGNTZW5kIChmbiwgYXJncywgbnVtID0gMSkge1xuICAgIGl0KCdzaG91bGQgc2VuZCBhbiBycGMgbWVzc2FnZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBzcHkgPSBzaW5vbi5zcHkocmQucnBjQ2xpZW50LCAnc2VuZCcpO1xuICAgICAgYXdhaXQgcmRbZm5dKC4uLmFyZ3MpO1xuICAgICAgc3B5LmNhbGxDb3VudC5zaG91bGQuZXF1YWwobnVtKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBjb25maXJtUmVtb3RlRGVidWdnZXJFcnJvckhhbmRsaW5nIChzZXJ2ZXIsIGZuLCBhcmdzLCBlcnJUZXh0ID0gJ3JlbW90ZSBkZWJ1Z2dlciBlcnJvcicpIHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBlcnJvciBmcm9tIHJlbW90ZSBkZWJ1Z2dlcicsIGFzeW5jICgpID0+IHtcbiAgICAgIHNlcnZlci5zZXREYXRhUmVzcG9uc2VFcnJvcihlcnJUZXh0KTtcbiAgICAgIGF3YWl0IHJkW2ZuXSguLi5hcmdzKS5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKGVyclRleHQpO1xuICAgIH0pO1xuICB9XG5cbiAgZGVzY3JpYmUoJyNjb25uZWN0JywgKCkgPT4ge1xuICAgIGxldCBzZXJ2ZXIgPSBuZXcgUmVtb3RlRGVidWdnZXJTZXJ2ZXIoKTtcblxuICAgIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgc2VydmVyLnN0YXJ0KCk7XG4gICAgfSk7XG4gICAgYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHNlcnZlci5zdG9wKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBhcHBsaWNhdGlvbiBpbmZvcm1hdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIChhd2FpdCByZC5jb25uZWN0KCkpLnNob3VsZC5lcWwoQVBQX0lORk8pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgc2V0IHRoZSBjb25uZWN0aW9uIGtleScsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBzcHkgPSBzaW5vbi5zcHkocmQsICdzZXRDb25uZWN0aW9uS2V5Jyk7XG4gICAgICBhd2FpdCByZC5jb25uZWN0KCk7XG4gICAgICBzcHkuY2FsbGVkT25jZS5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJyNkaXNjb25uZWN0Jywgd2l0aENvbm5lY3RlZFNlcnZlcihyZHMsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGRpc2Nvbm5lY3QgZnJvbSB0aGUgcnBjIGNsaWVudCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBzcHkgPSBzaW5vbi5zcHkocmQucnBjQ2xpZW50LCAnZGlzY29ubmVjdCcpO1xuICAgICAgYXdhaXQgcmQuZGlzY29ubmVjdCgpO1xuICAgICAgc3B5LmNhbGxlZE9uY2Uuc2hvdWxkLmJlLnRydWU7XG4gICAgICBzcHkucmVzdG9yZSgpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgZW1pdCBhbiBhcHByb3ByaWF0ZSBldmVudCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBzcHkgPSBzaW5vbi5zcHkoKTtcbiAgICAgIHJkLm9uKFJlbW90ZURlYnVnZ2VyLkVWRU5UX0RJU0NPTk5FQ1QsIHNweSk7XG4gICAgICBhd2FpdCByZC5kaXNjb25uZWN0KCk7XG4gICAgICBzcHkuY2FsbGVkT25jZS5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgfSkpO1xuXG4gIGRlc2NyaWJlKCcjc2VsZWN0QXBwJywgd2l0aENvbm5lY3RlZFNlcnZlcihyZHMsIChzZXJ2ZXIpID0+IHtcbiAgICBjb25maXJtUnBjU2VuZCgnc2VsZWN0QXBwJywgW10pO1xuICAgIGl0KCdzaG91bGQgYmUgYWJsZSB0byBoYW5kbGUgYW4gYXBwIGNoYW5nZSBldmVudCBiZWZvcmUgc2VsZWN0aW9uJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy50aW1lb3V0KDEwMDAwKTtcblxuICAgICAgbGV0IGluaXRpYWxJZEtleSA9IHJkLmFwcElkS2V5O1xuICAgICAgLy8gY2hhbmdlIHRoZSBhcHAgaW1tZWRpYXRlbHlcbiAgICAgIHNlcnZlci5jaGFuZ2VBcHAoMSwgdHJ1ZSk7XG5cbiAgICAgIC8vIG5lZWQgdG8gd2FpdCBmb3IgdGhlIGNoYW5nZSB0byBoYXZlIGJlZW4gcmVjZWl2ZWRcbiAgICAgIC8vIHdhaXQgdXAgdG8gMiBzZWNvbmRzXG4gICAgICBsZXQgdGltZW91dCA9IDIwMDA7XG4gICAgICBsZXQgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgd2hpbGUgKERhdGUubm93KCkgPD0gKHN0YXJ0ICsgdGltZW91dCkpIHtcbiAgICAgICAgLy8gb25jZSB0aGUgYXBwSWRLZXkgaGFzIGNoYW5nZWQsIHdlIGFyZSBnb29kIHRvIGdvXG4gICAgICAgIGlmIChyZC5hcHBJZEtleSAhPT0gaW5pdGlhbElkS2V5KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5kZWxheSgxMDApO1xuICAgICAgfVxuXG4gICAgICBsZXQgc3B5ID0gc2lub24uc3B5KHJkLnJwY0NsaWVudCwgJ3NlbGVjdEFwcCcpO1xuICAgICAgbGV0IHNlbGVjdFByb21pc2UgPSByZC5zZWxlY3RBcHAoKTtcblxuICAgICAgc2VydmVyLnNlbmRQYWdlSW5mb01lc3NhZ2UoJ1BJRDo0MicpO1xuICAgICAgc2VydmVyLnNlbmRQYWdlSW5mb01lc3NhZ2UoJ1BJRDo0NCcpO1xuXG4gICAgICBhd2FpdCBzZWxlY3RQcm9taXNlO1xuXG4gICAgICByZC5hcHBJZEtleS5zaG91bGQuZXF1YWwoJ1BJRDo0MicpO1xuICAgICAgc3B5LmNhbGxlZE9uY2Uuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBiZSBhYmxlIHRvIGhhbmRsZSBhbiBhcHAgY2hhbmdlIGV2ZW50IGR1cmluZyBzZWxlY3Rpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBjaGFuZ2UgdGhlIGFwcCB3aGVuIHRoZSBzZWxlY3RBcHAgY2FsbCBnZXRzIGluXG4gICAgICBzZXJ2ZXIuY2hhbmdlQXBwKDEsIGZhbHNlKTtcblxuICAgICAgbGV0IHNweSA9IHNpbm9uLnNweShyZC5ycGNDbGllbnQsICdzZWxlY3RBcHAnKTtcbiAgICAgIGxldCBzZWxlY3RQcm9taXNlID0gcmQuc2VsZWN0QXBwKCk7XG5cbiAgICAgIGF3YWl0IFByb21pc2UuZGVsYXkoMTAwMCk7XG4gICAgICBzZXJ2ZXIuc2VuZFBhZ2VJbmZvTWVzc2FnZSgnUElEOjQ0Jyk7XG4gICAgICBzZXJ2ZXIuc2VuZFBhZ2VJbmZvTWVzc2FnZSgnUElEOjQyJyk7XG4gICAgICBzZXJ2ZXIuc2VuZFBhZ2VJbmZvTWVzc2FnZSgnUElEOjQ2Jyk7XG5cbiAgICAgIGF3YWl0IHNlbGVjdFByb21pc2U7XG5cbiAgICAgIHNweS5jYWxsZWRUd2ljZS5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIG5vdCBjb25uZWN0IHRvIGFwcCBpZiB1cmwgaXMgYWJvdXQ6YmxhbmsgYW5kIGlnbm9yZUFib3V0QmxhbmtVcmwgaXMgcGFzc2VkIHRydWUgdG8gc2VsZWN0QXBwJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IHNlbGVjdFByb21pc2UgPSByZC5zZWxlY3RBcHAoe2lnbm9yZUFib3V0QmxhbmtVcmw6IHRydWV9KTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgc2VsZWN0UHJvbWlzZTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBlcnIubWVzc2FnZS5zaG91bGQuaW5jbHVkZSgnQ291bGQgbm90IGNvbm5lY3QgdG8gYSB2YWxpZCBhcHAnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSkpO1xuXG4gIGRlc2NyaWJlKCcjc2VsZWN0UGFnZScsIHdpdGhDb25uZWN0ZWRTZXJ2ZXIocmRzLCAoc2VydmVyKSA9PiB7XG4gICAgY29uZmlybVJwY1NlbmQoJ3NlbGVjdFBhZ2UnLCBbMSwgMiwgdHJ1ZV0sIDMpO1xuICAgIGNvbmZpcm1ScGNTZW5kKCdzZWxlY3RQYWdlJywgWzEsIDIsIGZhbHNlXSwgNCk7XG4gICAgY29uZmlybVJlbW90ZURlYnVnZ2VyRXJyb3JIYW5kbGluZyhzZXJ2ZXIsICdzZWxlY3RQYWdlJywgWzEsIDJdKTtcbiAgfSkpO1xuXG4gIGRlc2NyaWJlKCcjZXhlY3V0ZScsIHdpdGhDb25uZWN0ZWRTZXJ2ZXIocmRzLCAoKSA9PiB7XG4gICAgcmVxdWlyZUFwcElkS2V5KCdleGVjdXRlJywgW10pO1xuICAgIHJlcXVpcmVQYWdlSWRLZXkoJ2V4ZWN1dGUnLCBbXSk7XG4gICAgY29uZmlybVJwY1NlbmQoJ2V4ZWN1dGUnLCBbJ2RvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaHRtbFwiKVswXS5vdXRlckhUTUwnXSk7XG4gIH0pKTtcblxuICBkZXNjcmliZSgnI2NoZWNrUGFnZUlzUmVhZHknLCB3aXRoQ29ubmVjdGVkU2VydmVyKHJkcywgKHNlcnZlcikgPT4ge1xuICAgIHJlcXVpcmVBcHBJZEtleSgnY2hlY2tQYWdlSXNSZWFkeScsIFtdKTtcbiAgICBjb25maXJtUnBjU2VuZCgnY2hlY2tQYWdlSXNSZWFkeScsIFtdKTtcbiAgICBpdCgnc2hvdWxkIHJldHVybiB0cnVlIHdoZW4gc2VydmVyIHJlc3BvbmRzIHdpdGggY29tcGxldGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBzZXJ2ZXIuc2V0RGF0YVJlc3BvbnNlVmFsdWUoJ2NvbXBsZXRlJyk7XG4gICAgICBsZXQgcmVhZHkgPSBhd2FpdCByZC5jaGVja1BhZ2VJc1JlYWR5KCk7XG4gICAgICByZWFkeS5zaG91bGQuYmUudHJ1ZTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBmYWxzZSB3aGVuIHNlcnZlciByZXNwb25kcyB3aXRoIGxvYWRpbmcnLCBhc3luYyAoKSA9PiB7XG4gICAgICBzZXJ2ZXIuc2V0RGF0YVJlc3BvbnNlVmFsdWUoJ2xvYWRpbmcnKTtcbiAgICAgIGxldCByZWFkeSA9IGF3YWl0IHJkLmNoZWNrUGFnZUlzUmVhZHkoKTtcbiAgICAgIHJlYWR5LnNob3VsZC5iZS5mYWxzZTtcbiAgICB9KTtcbiAgICBjb25maXJtUmVtb3RlRGVidWdnZXJFcnJvckhhbmRsaW5nKHNlcnZlciwgJ2NoZWNrUGFnZUlzUmVhZHknLCBbXSk7XG4gIH0pKTtcblxuICBkZXNjcmliZSgnI2V4ZWN1dGVBdG9tJywgd2l0aENvbm5lY3RlZFNlcnZlcihyZHMsIChzZXJ2ZXIpID0+IHtcbiAgICBjb25maXJtUnBjU2VuZCgnZXhlY3V0ZUF0b20nLCBbJ2ZpbmRfZWxlbWVudCcsIFtdLCBbXV0pO1xuICAgIGl0KCdzaG91bGQgZXhlY3V0ZSB0aGUgYXRvbScsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBzZW50RWxlbWVudCA9IHtFTEVNRU5UOiAnOndkYzoxNDM1Nzg0Mzc3NTQ1J307XG4gICAgICBzZXJ2ZXIuc2V0RGF0YVJlc3BvbnNlVmFsdWUoc2VudEVsZW1lbnQpO1xuICAgICAgbGV0IGVsZW1lbnQgPSBhd2FpdCByZC5leGVjdXRlQXRvbSgnZmluZF9lbGVtZW50JywgW10sIFtdKTtcbiAgICAgIGVsZW1lbnQuc2hvdWxkLmVxbChzZW50RWxlbWVudCk7XG4gICAgfSk7XG4gICAgY29uZmlybVJlbW90ZURlYnVnZ2VyRXJyb3JIYW5kbGluZyhzZXJ2ZXIsICdleGVjdXRlQXRvbScsIFsnZmluZF9lbGVtZW50JywgW10sIFtdXSk7XG4gIH0pKTtcblxuICBkZXNjcmliZSgndGltZWxpbmUnLCB3aXRoQ29ubmVjdGVkU2VydmVyKHJkcywgKCkgPT4ge1xuICAgIGRlc2NyaWJlKCcjc3RhcnRUaW1lbGluZScsICgpID0+IHtcbiAgICAgIGxldCB0aW1lbGluZUNhbGxiYWNrID0gc2lub24uc3B5KCk7XG4gICAgICBjb25maXJtUnBjU2VuZCgnc3RhcnRUaW1lbGluZScsIFt0aW1lbGluZUNhbGxiYWNrXSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnI3N0b3BUaW1lbGluZScsICgpID0+IHtcbiAgICAgIGNvbmZpcm1ScGNTZW5kKCdzdG9wVGltZWxpbmUnLCBbXSk7XG4gICAgfSk7XG4gIH0pKTtcblxuICBkZXNjcmliZSgnI3dhaXRGb3JGcmFtZU5hdmlnYXRlZCcsIHdpdGhDb25uZWN0ZWRTZXJ2ZXIocmRzLCAoc2VydmVyKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB3b3JrIHdoZW4gdGhlIGRlbGF5IGlzIGNhbmNlbGxlZCBidXQgdGhlIHNlcnZlciBzZW5kcyBtZXNzYWdlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IHAgPSByZC53YWl0Rm9yRnJhbWVOYXZpZ2F0ZWQoKTtcbiAgICAgIHJkLm5hdmlnYXRpb25EZWxheS5jYW5jZWwoKTtcblxuICAgICAgLy8gbWFrZSB0aGUgc2VydmVyIHNlbmQgdGhlIG5hdmlnYXRpb24gbWVzc2FnZVxuICAgICAgc2VydmVyLnNlbmRGcmFtZU5hdmlnYXRpb25NZXNzYWdlKCk7XG5cbiAgICAgIC8vIHdhaXQgZm9yIHJkLndhaXRGb3JGcmFtZU5hdmlnYXRlZCgpIHRvIGZpbmlzaFxuICAgICAgbGV0IHNvdXJjZSA9IGF3YWl0IHA7XG4gICAgICBzb3VyY2Uuc2hvdWxkLmVxdWFsKCdyZW1vdGUtZGVidWdnZXInKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHRpbWVvdXQgYW5kIGZpbmlzaCB3aGVuIHNlcnZlciBkb2VzIG5vdCBzZW5kIG1lc3NhZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgc291cmNlID0gYXdhaXQgcmQud2FpdEZvckZyYW1lTmF2aWdhdGVkKCk7XG4gICAgICBzb3VyY2Uuc2hvdWxkLmVxdWFsKCd0aW1lb3V0Jyk7XG4gICAgfSk7XG4gIH0pKTtcblxuICBkZXNjcmliZSgnI25hdlRvVXJsJywgd2l0aENvbm5lY3RlZFNlcnZlcihyZHMsICgpID0+IHtcbiAgICBsZXQgdXJsID0gJ2h0dHA6Ly9hcHBpdW0uaW8nO1xuXG4gICAgcmVxdWlyZUFwcElkS2V5KCduYXZUb1VybCcsIFt1cmxdKTtcbiAgICByZXF1aXJlUGFnZUlkS2V5KCduYXZUb1VybCcsIFt1cmxdKTtcbiAgICBjb25maXJtUnBjU2VuZCgnbmF2VG9VcmwnLCBbdXJsXSwgMik7XG4gIH0pKTtcblxuICBkZXNjcmliZSgnI2NhbGxGdW5jdGlvbicsIHdpdGhDb25uZWN0ZWRTZXJ2ZXIocmRzLCAoKSA9PiB7XG4gICAgcmVxdWlyZUFwcElkS2V5KCdjYWxsRnVuY3Rpb24nLCBbXSk7XG4gICAgcmVxdWlyZVBhZ2VJZEtleSgnY2FsbEZ1bmN0aW9uJywgW10pO1xuICAgIGNvbmZpcm1ScGNTZW5kKCdjYWxsRnVuY3Rpb24nLCBbXSk7XG4gIH0pKTtcblxuICBkZXNjcmliZSgnI3BhZ2VMb2FkJywgd2l0aENvbm5lY3RlZFNlcnZlcihyZHMsIChzZXJ2ZXIpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNhbGwgI2NoZWNrUGFnZUlzUmVhZHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgc3B5ID0gc2lub24uc3B5KHJkLCAnY2hlY2tQYWdlSXNSZWFkeScpO1xuICAgICAgYXdhaXQgcmQucGFnZUxvYWQoKTtcbiAgICAgIHNweS5jYWxsZWRPbmNlLnNob3VsZC5iZS50cnVlO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IGNhbGwgI2NoZWNrUGFnZUlzUmVhZHkgaWYgZGVsYXkgaXMgY2FuY2VsbGVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IHNweSA9IHNpbm9uLnNweShyZCwgJ2NoZWNrUGFnZUlzUmVhZHknKTtcbiAgICAgIGxldCBwID0gcmQucGFnZUxvYWQoKTtcbiAgICAgIHJkLnBhZ2VMb2FkRGVsYXkuY2FuY2VsKCk7XG4gICAgICBhd2FpdCBwO1xuICAgICAgc3B5LmNhbGxlZC5zaG91bGQuYmUuZmFsc2U7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXRyeSBpZiBwYWdlIGlzIG5vdCByZWFkeScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIGdpdmUgYSBsb25nIHRpbWVvdXQgc28gd2UgY2FuIGdldCB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgc2VydmVyXG4gICAgICByZC5wYWdlTG9hZE1zID0gMTAwMDA7XG5cbiAgICAgIC8vIG1ha2UgdGhlIHNlcnZlciByZXNwb25kIGZpcnN0IHdpdGggcmFuZG9tIHN0YXR1cywgdGhlbiB3aXRoIGNvbXBsZXRlXG4gICAgICBzZXJ2ZXIuc2V0RGF0YVJlc3BvbnNlVmFsdWUoJ2xvYWRpbmcnKTtcbiAgICAgIHNlcnZlci5zZXREYXRhUmVzcG9uc2VWYWx1ZSgnY29tcGxldGUnKTtcblxuICAgICAgbGV0IHNweSA9IHNpbm9uLnNweShyZCwgJ2NoZWNrUGFnZUlzUmVhZHknKTtcbiAgICAgIGF3YWl0IHJkLnBhZ2VMb2FkKCk7XG4gICAgICBzcHkuY2FsbGVkVHdpY2Uuc2hvdWxkLmJlLnRydWU7XG4gICAgfSk7XG4gIH0pKTtcblxuICBkZXNjcmliZSgnc29ja2V0IGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBzb2NrZXQgY29ubmVjdCBlcnJvcicsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHJkLmNvbm5lY3QoKS5zaG91bGQuYmUucmVqZWN0ZWQ7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
