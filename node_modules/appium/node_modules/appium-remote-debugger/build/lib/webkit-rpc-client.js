'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _remoteDebugger = require('./remote-debugger');

var _remoteMessages = require('./remote-messages');

var _remoteMessages2 = _interopRequireDefault(_remoteMessages);

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _helpers = require('./helpers');

var DATA_LOG_LENGTH = { length: 200 };

var WebKitRpcClient = (function (_events$EventEmitter) {
  _inherits(WebKitRpcClient, _events$EventEmitter);

  function WebKitRpcClient(host) {
    var port = arguments.length <= 1 || arguments[1] === undefined ? _remoteDebugger.REMOTE_DEBUGGER_PORT : arguments[1];
    var responseTimeout = arguments.length <= 2 || arguments[2] === undefined ? _remoteDebugger.RPC_RESPONSE_TIMEOUT_MS : arguments[2];

    _classCallCheck(this, WebKitRpcClient);

    _get(Object.getPrototypeOf(WebKitRpcClient.prototype), 'constructor', this).call(this);

    this.host = host;
    this.port = port;

    this.responseTimeout = responseTimeout;

    this.curMsgId = 0;

    this.dataHandlers = {};
    this.dataMethods = {};
    this.errorHandlers = {};

    this.setHandlers();
  }

  _createClass(WebKitRpcClient, [{
    key: 'connect',
    value: function connect(pageId) {
      return _regeneratorRuntime.async(function connect$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve, reject) {
              // we will only resolve this call when the socket is open
              // WebKit url
              var url = 'ws://' + _this.host + ':' + _this.port + '/devtools/page/' + pageId;
              _this.pageIdKey = pageId;

              // create and set up socket with appropriate event handlers
              _this.socket = new _ws2['default'](url);
              _this.socket.on('open', function () {
                _logger2['default'].debug('WebKit debugger web socket connected to url: ' + url);
                _this.connected = true;
                resolve();
              });
              _this.socket.on('close', function () {
                _logger2['default'].debug('WebKit remote debugger socket disconnected');
                _this.connected = false;
              });
              _this.socket.on('error', function (exception) {
                if (_this.connected) {
                  _logger2['default'].debug('WebKit debugger web socket error: ' + exception.message);
                  _this.connected = false;
                }

                reject(exception);
              });
              _this.socket.on('message', _this.receive.bind(_this));
            }));

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      _logger2['default'].debug('Disconnecting from WebKit remote debugger');
      if (this.isConnected()) {
        this.socket.close(1001);
      }
      this.connected = false;
    }
  }, {
    key: 'isConnected',
    value: function isConnected() {
      return this.socket !== null && this.connected;
    }
  }, {
    key: 'send',
    value: function send(command) {
      var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var data, id;
      return _regeneratorRuntime.async(function send$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            data = (0, _remoteMessages2['default'])(command, _lodash2['default'].defaults({ connId: this.connId, senderId: this.senderId }, opts));

            _logger2['default'].debug('Sending WebKit data: ' + _lodash2['default'].truncate(JSON.stringify(data), DATA_LOG_LENGTH)); // jshint ignore:line
            _logger2['default'].debug('Webkit response timeout: ' + this.responseTimeout);

            this.curMsgId++;
            data.id = this.curMsgId;

            id = this.curMsgId.toString();
            return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve, reject) {
              // only resolve the send command when WebKit returns a response
              // store the handler and the data sent
              _this2.dataHandlers[id] = resolve;
              _this2.dataMethods[id] = data.method;
              _this2.errorHandlers[id] = reject;

              // send the data
              data = JSON.stringify(data);
              _this2.socket.send(data, function (error) {
                if (!_lodash2['default'].isUndefined(error) && !_lodash2['default'].isNull(error)) {
                  _logger2['default'].debug('WebKit socket error occurred: ' + error);
                  reject(new Error(error));
                }
              });
            })['finally'](function (res) {
              // no need to hold onto anything
              delete _this2.dataHandlers[id];
              delete _this2.dataMethods[id];
              delete _this2.errorHandlers[id];

              // and pass along the result
              return res;
            }).timeout(this.responseTimeout));

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'receive',
    value: function receive(data) {
      _logger2['default'].debug('Receiving WebKit data: \'' + _lodash2['default'].truncate(data, DATA_LOG_LENGTH) + '\'');

      data = JSON.parse(data);
      if (!data) {
        _logger2['default'].warn('No parseable data found');
        return;
      }

      // we can get an error, or we can get a response that is an error
      if (data.wasThrown || data.result && data.result.wasThrown) {
        var message = undefined;
        if (data.wasThrown) {
          message = data.result.value || data.result.description;
        } else {
          message = data.result.result.value || data.result.result.description;
        }
        var error = new Error(message);
        if (data.id && this.errorHandlers[data.id]) {
          this.errorHandlers[data.id](error);
          return;
        } else {
          // this should never happen, but log at least
          _logger2['default'].errorAndThrow(error);
        }
      }

      // when sending we set a data method and associated callback.
      // get that, or the generic (automatically sent, not associated
      // with a particular request) method
      var handlerFor = undefined;
      if (data.id && this.dataMethods[data.id]) {
        _logger2['default'].debug('Found handler for message \'' + data.id + '\'');
        handlerFor = this.dataMethods[data.id];
      } else {
        _logger2['default'].debug('Did not find handler for message');
        handlerFor = data.method;
      }

      if (!handlerFor) {
        _logger2['default'].debug('Received an invalid method: \'' + data.method + '\'');
        return;
      }
      if (_lodash2['default'].has(this.handlers, handlerFor)) {
        this.handlers[handlerFor](data);
      } else {
        _logger2['default'].debug('WebKit debugger got a message for \'' + handlerFor + '\' ' + 'and have no handler, doing nothing.');
      }
    }
  }, {
    key: 'setHandlers',
    value: function setHandlers() {
      var _this3 = this;

      this.handlers = {
        'Runtime.evaluate': function RuntimeEvaluate(data) {
          var msgId = data.id;
          if (data.error) {
            _this3.errorHandlers[msgId](data.error);
          }

          _this3.dataHandlers[msgId](data.result);
        },
        'Page.navigate': function PageNavigate(data) {
          _logger2['default'].debug('Received page navigated message: ' + (0, _helpers.simpleStringify)(data));
          var msgId = data.id;
          if (data.error) {
            _this3.errorHandlers[msgId](data.error);
          }

          _this3.dataHandlers[msgId](data.result);
        },
        'Profiler.resetProfiles': function ProfilerResetProfiles() {
          _logger2['default'].debug('Device is telling us to reset profiles. Should probably ' + 'do some kind of callback here');
        },
        'Timeline.eventRecorded': function TimelineEventRecorded(data) {
          if (_this3.timelineEventHandler) {
            _this3.timelineEventHandler(data.result);
          }
        },
        'Console.messageAdded': function ConsoleMessageAdded(data) {
          if (_this3.consoleEventHandler) {
            _this3.consoleEventHandler(data.params.message);
          }
        }
      };
    }
  }, {
    key: 'setTimelineEventHandler',
    value: function setTimelineEventHandler(timelineEventHandler) {
      this.timelineEventHandler = timelineEventHandler;
    }
  }, {
    key: 'setConsoleLogEventHandler',
    value: function setConsoleLogEventHandler(consoleEventHandler) {
      this.consoleEventHandler = consoleEventHandler;
    }
  }]);

  return WebKitRpcClient;
})(_events2['default'].EventEmitter);

exports['default'] = WebKitRpcClient;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
